importPackage(com.ads.sqlparser.v1);
importPackage(java.io);
importPackage(com.ads.api.util);
importPackage(java.util);
importPackage(org.json);
importPackage(com.ads.api.beans.mm);
importPackage(com.ads.api.beans.sm);
importPackage(com.ads.api.beans.common);
importPackage(org.apache.commons.io);
importPackage(com.fasterxml.jackson.databind);
importPackage(org.apache.http.client.methods);
importPackage(org.apache.http.entity);
importPackage(org.apache.http.impl.client);
importPackage(org.apache.http.util);
importPackage(java.sql);
importPackage(org.apache.commons.lang3);
importPackage(com.erwin.cfx.connectors.ultramobile.denodotables);



var maputil = new MappingManagerUtil(AUTH_TOKEN);
var keyValueUtil = new KeyValueUtil(AUTH_TOKEN);
var systemManagereUtil = new SystemManagerUtil(AUTH_TOKEN);
var targetTableSet = new LinkedHashSet();
var actTarget = new HashSet();
var envMap=new LinkedHashMap();
var sysEnvList = new LinkedHashMap();
var fileFolderMap=new LinkedHashMap();

var columnsAgainstPrimaryTable = new HashMap();
var sourceSystemEnvMap = new HashMap();
var getSystemEnvMapForView = new HashMap();
var erwinSqlParser = new ErwinUMDenodoSqlPsDetailv2();
var project;
var projectName = "";
var subjectName = "";
var parentName = "";
var parentNamee = "";
var SubparentName = "";
var parentSubectId = -1;
var listSubjectNames = null;
var subjectId;
var dataBaseName = "";
var latestMappingVersion = null;
var latestMapVersion = null;
var updateMappingVersion = 0;
var latestMapV = 0;
var message = new StringBuilder();
var columnsInfoMap=new LinkedHashMap();
var assignProjectName=vContextProjName;
var assignSubjectName=vConetxtSubjName;
var finalMap = new HashMap();
var finalTableColumnMap = new HashMap();
var wrapperFileContent ="";

var metadataMapFromWrapper=new HashMap();
var metatDataForMeatadataCreation=new HashMap();

var finalTableWrapperMap = new HashMap();
var finaltableWrappeerMap = new HashMap();

var connectionDetailsMap = new HashMap();
var totalConnectionDetailsMap = new HashMap();
var SystemenvironmentDetails = new HashMap();
var tableColMapForStar=new LinkedHashMap();
var colListForStar=new ArrayList();

var assignProjectName=vContextProjName;
var assignSubjectName=vConetxtSubjName;
var tacol = new LinkedHashMap();
var databasePropertiesMap = new HashMap();
var systemEnvTableColMap = new HashMap();
var envtablecolmap = new HashMap();
var portNumber = "9999";

var assignDBName=tDbName;
var assignDIP=tDiP;
var assignDPort=tDePort;
var assignUserName=userName;
var assignPassword=password;
// message.append("\n Testing================================\n");



function execute() {
    //     return APIConstants.APPLICATION_DOCUMENTS_PATH+SUPPORTFILESPATH;

    var vstartTime= System.currentTimeMillis();
    var finalStatus= new StringBuilder();
    //return assignDIP;
    var prId=-1;
    var vParentSubjectId=-1;
    prId=PROJECTID;
    vParentSubjectId =SUBJECTID;
    if(assignProjectName.equals("")){

        if(prId === 0 || prId === -1){
            return "Please select Project or enter Project name.";
        }
        else{
            var existProjectObject1=maputil.getProject(prId);
            var exProJNAme=existProjectObject1.getProjectName();
            if(vParentSubjectId === 0 || vParentSubjectId === -1){
                vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                if (vParentSubjectId === 0 || vParentSubjectId === -1) {
                    var sub1 = new Subject();
                    sub1.setSubjectName(assignSubjectName);
                    sub1.setProjectId(prId);
                    maputil.createSubject(sub1);
                    vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                }
                else {
                    vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                }
            }
        }
    }
    else{
        if(prId > 0){
            var existProjectObject1=maputil.getProject(prId);
            var exProJNAme=existProjectObject1.getProjectName();
            if(vParentSubjectId === 0 || vParentSubjectId === -1){
                vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                if (vParentSubjectId === 0 || vParentSubjectId === -1) {
                    var sub1 = new Subject();
                    sub1.setSubjectName(assignSubjectName);
                    sub1.setProjectId(prId);
                    maputil.createSubject(sub1);
                    vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                }
                else {
                    vParentSubjectId = maputil.getSubjectId(exProJNAme, assignSubjectName);
                }

            }
        }
        else{
            var existProjectObject=maputil.getProject(assignProjectName);
            if(existProjectObject === null){
                prId=-1;
            }
            else{
                prId=existProjectObject.getProjectId();
            }
            if(prId > 0){
                try {
                    vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    if (vParentSubjectId === 0 || vParentSubjectId === -1) {
                        var sub1 = new Subject();
                        sub1.setSubjectName(assignSubjectName);
                        sub1.setProjectId(prId);
                        maputil.createSubject(sub1);
                        vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    }
                    else {
                        vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    }
                }
                catch ( e) {

                    message.append("Exception In createSubject() \n" + e);
                    message.append("\n ================================");
                }
            }
            else{
                var projectObject=new Project();
                projectObject.setProjectName(assignProjectName);
                projectObject.setProjectDescription("denodo detailed project");
                maputil.createProject(projectObject);
                prId=maputil.getProjectId(assignProjectName);

                try {
                    vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    if (vParentSubjectId === 0 || vParentSubjectId === -1) {
                        var sub = new Subject();
                        sub.setSubjectName(assignSubjectName);
                        sub.setProjectId(prId);
                        maputil.createSubject(sub);
                        vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    }
                    else {
                        vParentSubjectId = maputil.getSubjectId(assignProjectName, assignSubjectName);
                    }
                }
                catch ( e) {

                    message.append("Exception In createSubject() \n" + e);
                    message.append("\n ================================");
                }

            }
        }
    }
    //return assignDIP;
    getAllEnvironmentsBasedonTheCatOptions(vsourceSysName,vsourceEnvName);

    var gcStatus = "";
    var sqlfile = "";
    var     sqlfile1="";
    var checkForMapSpec=checkbox3;
    if(checkForMapSpec == "true"){
        checkForMapSpec="true";
    }
    else{
        checkForMapSpec="false";
    }

    try{
        var assignupload=upload1;
        if("".equals(assignupload) || "[]".equals(assignupload) || assignupload === undefined ){

            if("".equals(sqlfile)){
                var sPath=vVqlPath;
//                 sPath = FilenameUtils.normalizeNoEndSeparator(sPath, true);


                if("".equals(sPath.trim())){
                    return "Please give the file path.";
                }
                sqlfile=sPath;
                sqlfile1=sPath;
            }


        }
        else{
            var jsonarray = new JSONArray(upload1);

            for(var k1 = 0; k1 < jsonarray.length();
                k1++) {

                var jsonobject = jsonarray.getJSONObject(k1);
                var serverName = jsonobject.getString("serverName");
                serverName= APIConstants.APPLICATION_DOCUMENTS_PATH+ serverName;

                serverName = serverName.substring(0,serverName.lastIndexOf("/"));

                sqlfile = serverName;

                sqlfile1=serverName;
                break;
            }

        }

    }
    catch(ne){
        return ne;
    }

    try{

        var tempFile=new File(sqlfile);
        var vGrammar_File = SUPPORTFILESPATH+"/Grammar_File/grammerBr.egt";
        var vDatabaseType = databaseType;
        if(vDatabaseType.equals("denodo")){
            vDatabaseType="mssql";
        }
        var status;
        var kstatus = "";
        var mapResult;
        sqlfile = new File(sqlfile1);
        var fileLevelQuriesMap = null;
        var ipofDenodo="jdbc:vdb://"+assignDIP;
        var driverandtimeoutparam="com.denodo.vdp.jdbc.Driver"+"#driver#"+"?queryTimeout=100000&chunkTimeout=1000&userAgent=myApplication&autoCommit=true&ssl=false";
        var descviewQuery="DESC VQL VIEW ";
        var descassociationQuery="DESC VQL ASSOCIATION";
        var selectQuery="SELECT *FROM GET_ASSOCIATIONS() WHERE input_database_name = ? AND input_type = 'views'";
        var connn= getVqlQuery(sqlfile);
        //         return connn;
        sqlfile1 = new File(sqlfile+"/output");

        if(!sqlfile1.exists()){
            sqlfile1.mkdir();
        }
        writefiles(sqlfile,vDatabaseType);

        createMetadata(systemManagereUtil,Sorcesystem,srcEnv,metatDataForMeatadataCreation);

        if(sqlfile1.isDirectory()){
            gcStatus=  createBiQueryAndAssociationMappings(fileFolderMap, sqlfile1, prId,maputil,keyValueUtil,domainUrl,
                                                           vDatabaseType,userName,password,Sorcesystem,srcEnv,trgsytem,tgrtEnv,systemManagereUtil,checkForMapSpec,vParentSubjectId);

        }
        FileUtils.cleanDirectory(new File(sqlfile));
        var vEndTime= System.currentTimeMillis();
        gcStatus=gcStatus+"\n Total Time Taken in millisecond="+(vEndTime-vstartTime)+"\n";
        //message.append(gcStatus);

        return gcStatus;
    }
    catch (e){
        System.gc();

        gcStatus=gcStatus+"\n"+e+"\n";
        //message.append(gcStatus);

        return gcStatus;
    }
    finally{
        // return gcStatus;
    }
}


function getVqlQuery(sqlFile) {

    var res= new java.lang.StringBuilder();
    var conn= null;
    var resultSet= null;
    var  viewStatement= null;
    var   viewInfoResultSet= null;
    var      preparedStatement= null;
    var    associationResultSet= null;
    var associationStatement = null;
    var associationInfoResult=null;
    FileUtils.cleanDirectory(new File(sqlFile));
    var   newFile = new File(sqlFile+"/"+assignDBName+".vql");
    try{

        Class.forName("com.denodo.vdp.jdbc.Driver");

        //   return  DriverManager.getConnection("jdbc:vdb://" + "10.100.56.41" + ":" + "9090" + "/" + "ultra_shared" + "?queryTimeout=100000&chunkTimeout=1000&userAgent=myApplication&autoCommit=true&ssl=true", "fionarafati", "F1oN@");
        conn= DriverManager.getConnection("jdbc:vdb://" + assignDIP + ":" + assignDPort + "/" + assignDBName + "?queryTimeout=100000&chunkTimeout=1000&userAgent=myApplication&autoCommit=true&ssl=false",userName, password);
        //         return conn;
        var sqldatabaseMetaData= conn.getMetaData();
        resultSet= sqldatabaseMetaData.getTables(assignDBName, null, null, null);
        while (resultSet.next()) {

            var  viewInfoQuery = "DESC VQL VIEW " + resultSet.getString("TABLE_NAME");
            System.out.println("tableName======+"+resultSet.getString("TABLE_NAME"));
            viewStatement = conn.createStatement();
            viewInfoResultSet = viewStatement.executeQuery(viewInfoQuery);
            //     return viewInfoResultSet;
            viewInfoResultSet.next();

            res.append(viewInfoResultSet.getString(1));
        }

        var associationTableQuery = "SELECT *FROM GET_ASSOCIATIONS() WHERE input_database_name = ? AND input_type = 'views'";
        preparedStatement =conn.prepareStatement(associationTableQuery);
        preparedStatement.setString(1, assignDBName);
        associationResultSet = preparedStatement.executeQuery();
        while (associationResultSet.next()) {
            var associationInfoQuery= "DESC VQL ASSOCIATION " + associationResultSet.getString("association_name");
            associationStatement = conn.createStatement();
            associationInfoResult= associationStatement.executeQuery(associationInfoQuery);
            associationInfoResult.next();
            var associationQueryInfo = associationInfoResult.getString(1);
            // return associationQueryInfo;


            if(associationQueryInfo.contains("CREATE OR REPLACE ASSOCIATION")){
                associationQueryInfo= "CREATE ASSOCIATION" +associationQueryInfo.split("CREATE OR REPLACE ASSOCIATION")[1];

            }
            else if(associationQueryInfo.contains("CREATE ASSOCIATION")){
                associationQueryInfo= "CREATE ASSOCIATION" +associationQueryInfo.split("CREATE ASSOCIATION")[1];
                //System.out.println(associationQueryInfo);

            }


            res.append(associationQueryInfo);




        }

    }
    catch(exd){

        exd.printStackTrace();
    }
    finally{
        try{
            if(associationResultSet !== null){
                associationResultSet.close();
            }
            if(preparedStatement !== null){
                preparedStatement.close();
            }
            if(viewInfoResultSet !== null){
                viewInfoResultSet.close();
            }
            if(viewStatement !== null){
                viewStatement.close();
            }
            if(associationStatement !== null){
                associationStatement.close();
            }
            if(associationInfoResult !== null){
                associationInfoResult.close();
            }
            if(associationResultSet !== null){
                associationResultSet.close();
            }
            if(resultSet !== null){
                resultSet.close();
            }
            if(conn !== null){
                conn.close();
            }
            FileUtils.writeStringToFile(newFile, res.toString());
        }

        catch(e){

        }
    }



    return res.toString();
}

function writefiles(sqlfiles,dbTypes){
    //return "hi";
    var sqlfileContent = "";
    var folderName = "";
    var databaseName = "";
    var sqlfilearr=null;
    var sqlWrapperFile = "";
    var actualDbName="";
    var driverName="";
    var url="";
    var userName="";
    var password="";
    var wrapperSqlQuery="";

    try{
        sqlfilearr=sqlfiles.listFiles();
        for(var i=0;i<sqlfilearr.length;i++){
            var file=sqlfilearr[i];
            // return sqlfilearr[i].getAbsolutePath();
            if(!file.isDirectory()){
                sqlfileContent=FileUtils.readFileToString(file).trim();
                sqlfileContent = sqlfileContent.replaceAll("\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$", "");
                fileFolderMap.put("dataBaseName", assignDBName);
                databaseName = assignDBName;
                var tempForSemoColon="";
                var tempWrapperSemiColon="";
                if(sqlfileContent.trim().split(";").length > 0){
                    //                     return sqlfileContent;
                    var multiplesqlfiles = sqlfileContent.split(";");
                    //                                        return multiplesqlfiles.toString();

                    for (var j = 0; j < multiplesqlfiles.length; j++) {
                        try{
                            var multiplesqlfile = multiplesqlfiles[j].trim();

                            if (!multiplesqlfile.toUpperCase().contains("CREATE VIEW") && !multiplesqlfile.toUpperCase().contains("CREATE WRAPPER") && !multiplesqlfile.toUpperCase().contains("CREATE TABLE")&& !multiplesqlfile.toUpperCase().contains("CREATE ASSOCIATION")&&!multiplesqlfile.toUpperCase().contains("CREATE OR REPLACE VIEW")&&!multiplesqlfile.toUpperCase().contains("CREATE OR REPLACE ASSOCIATION")) {

                                if (multiplesqlfile.toUpperCase().contains("CONNECT DATABASE")) {
                                    var databaseNamee = multiplesqlfile.split("CONNECT DATABASE")[1].trim();
                                    databaseName = databaseNamee;
                                    if (!fileFolderMap.containsKey("dataBaseName")) {

                                        fileFolderMap.put("dataBaseName", databaseNamee);
                                    }
                                    else if (fileFolderMap.get("dataBaseName") !== null) {
                                        var oldValue = fileFolderMap.get("dataBaseName");
                                        fileFolderMap.put("dataBaseName", oldValue + "##" + databaseNamee);

                                    }

                                }
                                else if (multiplesqlfile.toUpperCase().contains("CREATE DATASOURCE")) {
                                    var dataSourceArray = multiplesqlfile.split("\n");
                                    for (var dsa=0; dsa< dataSourceArray.length;dsa++) {
                                        var  dataSourceArr=  dataSourceArray[dsa];
                                        if (dataSourceArr.contains("DRIVERCLASSNAME")) {
                                            driverName = dataSourceArr.split("=")[1].replace("'", "").replace("'", "");
                                        }
                                        else if (dataSourceArr.contains("DATABASEURI")) {
                                            url = dataSourceArr.split("=")[1].replace("'", "").replace("'", "");
                                        }
                                        else if (dataSourceArr.contains("USERNAME")) {
                                            userName = dataSourceArr.split("=")[1].replace("'", "").replace("'", "");
                                        }
                                        else if (dataSourceArr.contains("USERPASSWORD")) {
                                            password = dataSourceArr.split("=")[1].replace("'", "").replace("'", "");
                                        }
                                        else if (dataSourceArr.contains("DATABASENAME")) {
                                            actualDbName = dataSourceArr.split("=")[1].replace("'", "").replace("'", "");
                                        }

                                    }
                                    connectionDetailsMap.put("drivername#url#username#password", driverName + "##" + url + "##" + userName + "##" + password+"##"+actualDbName);
                                    if (totalConnectionDetailsMap.get(databaseName) === null) {
                                        totalConnectionDetailsMap.put(databaseName, connectionDetailsMap);
                                    }
                                    else if (totalConnectionDetailsMap.get(databaseName) !== null) {
                                        var  oldValueMap = totalConnectionDetailsMap.get(databaseName);

                                        oldValueMap.putAll(connectionDetailsMap);

                                        totalConnectionDetailsMap.get(databaseName).putAll(oldValueMap);

                                    }
                                    connectionDetailsMap = new HashMap();


                                }
                                else if(!"".equals(tempForSemoColon)){

                                    multiplesqlfile=tempForSemoColon+multiplesqlfile;


                                    tempForSemoColon="";

                                    if (multiplesqlfile.toUpperCase().contains("CONTEXT")) {
                                        var contextIndex = multiplesqlfile.toUpperCase().indexOf("CONTEXT");
                                        var closedparenthesisInde = multiplesqlfile.toUpperCase().indexOf(")", contextIndex);
                                        var contextReplacement = multiplesqlfile.substring(contextIndex, closedparenthesisInde + 1);
                                        multiplesqlfile = multiplesqlfile.replace(contextReplacement, "");
                                    }
                                    if (multiplesqlfile.toUpperCase().contains("PRIMARY KEY")) {
                                        var contextIndexP = multiplesqlfile.toUpperCase().indexOf("PRIMARY KEY");
                                        var closedparenthesisIndeP = multiplesqlfile.toUpperCase().indexOf(")", contextIndexP);
                                        var contextReplacementP = multiplesqlfile.substring(contextIndexP, closedparenthesisIndeP + 1);
                                        multiplesqlfile = multiplesqlfile.replace(contextReplacementP, "");
                                    }
                                    if (multiplesqlfile.toUpperCase().contains("CAST")){
                                        for(var castIndex = 0 ; castIndex < multiplesqlfile.toLowerCase().split("cast").length ;
                                            castIndex++ ){
                                            var cast = multiplesqlfile.toLowerCase().split("cast")[castIndex];
                                            if (cast.indexOf("('") === 0) {
                                                multiplesqlfile = multiplesqlfile.replace(cast.substring(0, cast.indexOf(")") + 1), cast.substring(0, cast.indexOf(")") + 1).replace("',", " AS").replace("'", ""));
                                            }
                                        }
                                    }
                                    if (multiplesqlfile.contains("||'-00'")){
                                        multiplesqlfile=multiplesqlfile.replace("||'-00'", "");
                                    }
                                    if (!multiplesqlfile.contains("FROM")){
                                        tempForSemoColon=multiplesqlfile;
                                        continue;
                                    }
                                    multiplesqlfile = multiplesqlfile.split("CREATE VIEW")[1];
                                    multiplesqlfile = "CREATE VIEW" + multiplesqlfile;
                                    if (multiplesqlfile.contains("FOLDER")) {
                                        folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("FOLDER"), multiplesqlfile.indexOf("AS"));
                                        multiplesqlfile = multiplesqlfile.replace(folderName, "");

                                        //folderName = folderName.replace("FOLDER = '/", "");
                                        //multiplesqlfile = multiplesqlfile.replace("FOLDER = '/", "");
                                        folderName=folderName.split("'")[1].replaceFirst("/","");

                                        folderName = folderName.replace("'", "");
                                        //                                multiplesqlfile = multiplesqlfile.replace("'", "");
                                        //                                multiplesqlfile = multiplesqlfile.replaceAll("FOLDER = \'.*\'", "");
                                        fileFolderMap.put(multiplesqlfile.split(" ")[2].trim().replaceAll("\n", "") + databaseName, folderName.trim());

                                    }

                                    var sqlfile = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "") + "#DB" + databaseName + ".sql");
                                    multiplesqlfile=ErwinUMDenodoDetailStarReplacementv1.executeForStarReplace(multiplesqlfile,dbTypes,tableColMapForStar);

                                    FileUtils.writeStringToFile(sqlfile, multiplesqlfile);


                                }
                                else if(!"".equals(tempWrapperSemiColon)){
                                    if (multiplesqlfile.trim().contains("date_add")) {

                                        var modifyMultiplesqlFile = "";
                                        for (var dat = 0; dat < multiplesqlfile.split("date_add").length; dat++) {
                                            var dateAddSplit = multiplesqlfile.split("date_add")[dat];
                                            if (dateAddSplit.indexOf("(") === 0) {
                                                try{
                                                    dateAddSplit = dateAddSplit.replace(dateAddSplit.substring(0, dateAddSplit.indexOf(")") + 1), dateAddSplit.substring(0, dateAddSplit.indexOf(")") + 1).replace("interval", ""));


                                                    if(dateAddSplit.split(" ")[2].equalsIgnoreCase("3")||dateAddSplit.split(" ")[2].equalsIgnoreCase("2")){
                                                        dateAddSplit = "Date_add" + dateAddSplit.replace(dateAddSplit.split(" ")[2], dateAddSplit.split(" ")[2] + ",");
                                                    }
                                                    else{
                                                        dateAddSplit = "Date_add" + dateAddSplit;
                                                    }

                                                }
                                                catch(e){
                                                    e.printStackTrace();
                                                }
                                                modifyMultiplesqlFile = modifyMultiplesqlFile + dateAddSplit;
                                            } 
                                            else {
                                                if(dat===0){
                                                    modifyMultiplesqlFile = modifyMultiplesqlFile + dateAddSplit;
                                                }
                                                else{
                                                    modifyMultiplesqlFile = modifyMultiplesqlFile +"date_add"+ dateAddSplit;
                                                }
                                            }

                                        }
                                        multiplesqlfile = modifyMultiplesqlFile;
                                    }

                                    if(!multiplesqlfile.toUpperCase().contains("OUTPUTSCHEMA")){
                                        tempWrapperSemiColon=tempWrapperSemiColon+multiplesqlfile;
                                        continue;
                                    }
                                    multiplesqlfile=tempWrapperSemiColon+multiplesqlfile;
                                    //                                     System.out.println("tempWrapperSemiColon"+multiplesqlfile);
                                    tempWrapperSemiColon="";
                                    multiplesqlfile=multiplesqlfile.replaceAll("''''", "'' ''");

                                    wrapperSqlQuery = multiplesqlfile.substring(multiplesqlfile.indexOf("SQLSENTENCE="), multiplesqlfile.lastIndexOf("OUTPUTSCHEMA")).replace("SQLSENTENCE='", "").replaceAll("\'\'", "\'").replaceAll("extract", "extract1").replaceAll("`timestamp`","timestamp").replaceAll("`bin`","bin").replaceAll("WHEREEXPRESSION DEFAULTVALUE 'dt >= dt'","");
                                    if(wrapperSqlQuery.trim().endsWith("\'\'")){
                                        wrapperSqlQuery=  wrapperSqlQuery.trim().replace("\'\'", "\'");
                                    }
                                    //sqlQueryMap.put(multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", ""), "CREATE VIEW"+" "+multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", "")+" "+"AS"+" "+wrapperSqlQuery);
                                    sqlWrapperFile = "CREATE VIEW" + " " + multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", "") + " " + "AS" + " " + wrapperSqlQuery;
                                    // writing wrapper sqlfilecontent
                                    writeFilesforSqlWrapper(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") ,multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", ""),databaseName,sqlWrapperFile,dbTypes);

                                    multiplesqlfile = multiplesqlfile.replace(multiplesqlfile.substring(multiplesqlfile.indexOf("SQLSENTENCE="), multiplesqlfile.indexOf("OUTPUTSCHEMA")), "");

                                    if (multiplesqlfile.contains("FOLDER")) {
                                        folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("/"), multiplesqlfile.indexOf("'", multiplesqlfile.indexOf("/")));

                                        fileFolderMap.put(multiplesqlfile.split(" ")[3].trim().replaceAll("\n", "")+ "Wrapper" + databaseName, folderName.trim());

                                    }

                                    var  sqlfile5 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", "") + "Wrapper" + databaseName + ".sql");
                                    FileUtils.writeStringToFile(sqlfile5, multiplesqlfile);

                                }




                            }//if end

                            else if (multiplesqlfile.toUpperCase().contains("CREATE TABLE")) {
                                multiplesqlfile = multiplesqlfile.split("CREATE TABLE")[1];
                                multiplesqlfile = "CREATE TABLE" + multiplesqlfile;

                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("/"), multiplesqlfile.indexOf("'", multiplesqlfile.indexOf("/"))).replace("/", "");

                                    fileFolderMap.put(multiplesqlfile.split(" ")[2].trim().replaceAll("\n", "") + databaseName, folderName.trim());

                                }

                                var sqlfile4 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "") + "Table" + databaseName + ".sql");
                                FileUtils.writeStringToFile(sqlfile4, multiplesqlfile);

                            }
                            else if (multiplesqlfile.toUpperCase().contains("CREATE WRAPPER")) {
                                multiplesqlfile = multiplesqlfile.split("CREATE WRAPPER")[1];
                                multiplesqlfile = "CREATE WRAPPER" + multiplesqlfile;

                                if (multiplesqlfile.toUpperCase().contains("CONTEXT")) {
                                    var contextIndex = multiplesqlfile.toUpperCase().indexOf("CONTEXT");
                                    var closedparenthesisInde = multiplesqlfile.toUpperCase().indexOf(")", contextIndex);
                                    var contextReplacement = multiplesqlfile.substring(contextIndex, closedparenthesisInde + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacement, "");
                                }

                                if (multiplesqlfile.toUpperCase().contains("PRIMARY KEY")) {
                                    var contextIndexP = multiplesqlfile.toUpperCase().indexOf("PRIMARY KEY");
                                    var closedparenthesisIndeP = multiplesqlfile.toUpperCase().indexOf(")", contextIndexP);
                                    var contextReplacementP = multiplesqlfile.substring(contextIndexP, closedparenthesisIndeP + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacementP, "");
                                }
                                if (multiplesqlfile.toUpperCase().contains("CAST")){
                                    for(var castIndex = 0 ; castIndex < multiplesqlfile.toLowerCase().split("cast").length ;
                                        castIndex++ ){
                                        var cast = multiplesqlfile.toLowerCase().split("cast")[castIndex];
                                        if (cast.indexOf("('") === 0) {
                                            multiplesqlfile = multiplesqlfile.replace(cast.substring(0, cast.indexOf(")") + 1), cast.substring(0, cast.indexOf(")") + 1).replace("',", " AS").replace("'", ""));
                                        }
                                    }
                                }
                                if (multiplesqlfile.contains("||'-00'")){
                                    multiplesqlfile=multiplesqlfile.replace("||'-00'", "");
                                }
                                if (multiplesqlfile.contains("''-01''")){
                                    multiplesqlfile=multiplesqlfile.replace("''-01''", "'-01'");
                                }
                                if (multiplesqlfile.trim().contains("date_add")) {

                                    var modifyMultiplesqlFile = "";
                                    for (var dat = 0; dat < multiplesqlfile.split("date_add").length; dat++) {
                                        var dateAddSplit = multiplesqlfile.split("date_add")[dat];
                                        if (dateAddSplit.indexOf("(") === 0) {
                                            try{
                                                dateAddSplit = dateAddSplit.replace(dateAddSplit.substring(0, dateAddSplit.indexOf(")") + 1), dateAddSplit.substring(0, dateAddSplit.indexOf(")") + 1).replace("interval", ""));


                                                if(dateAddSplit.split(" ")[2].equalsIgnoreCase("3")||dateAddSplit.split(" ")[2].equalsIgnoreCase("2")){
                                                    dateAddSplit = "Date_add" + dateAddSplit.replace(dateAddSplit.split(" ")[2], dateAddSplit.split(" ")[2] + ",");
                                                }
                                                else{
                                                    dateAddSplit = "Date_add" + dateAddSplit;
                                                }

                                            }
                                            catch(e){
                                                e.printStackTrace();
                                            }
                                            modifyMultiplesqlFile = modifyMultiplesqlFile + dateAddSplit;
                                        } 
                                        else {
                                            if(dat===0){
                                                modifyMultiplesqlFile = modifyMultiplesqlFile + dateAddSplit;
                                            }
                                            else{
                                                modifyMultiplesqlFile = modifyMultiplesqlFile +"date_add"+ dateAddSplit;
                                            }
                                        }

                                    }
                                    multiplesqlfile = modifyMultiplesqlFile;
                                }


                                if (multiplesqlfile.toUpperCase().contains("SQLSENTENCE")) {

                                    if(!multiplesqlfile.toUpperCase().contains("OUTPUTSCHEMA")){
                                        tempWrapperSemiColon=multiplesqlfile;
                                        continue;
                                    }
                                    multiplesqlfile=multiplesqlfile.replaceAll("''''", "'' ''");
                                    wrapperSqlQuery = multiplesqlfile.substring(multiplesqlfile.indexOf("SQLSENTENCE="), multiplesqlfile.lastIndexOf("OUTPUTSCHEMA")).replace("SQLSENTENCE='", "").replaceAll("\'\'", "\'").replaceAll("extract", "extract1").replaceAll("`timestamp`","timestamp").replaceAll("`bin`","bin").replaceAll("WHEREEXPRESSION DEFAULTVALUE 'dt >= dt'","");

                                    if(wrapperSqlQuery.trim().endsWith("\'\'")){
                                        wrapperSqlQuery=  wrapperSqlQuery.trim().replace("\'\'", "\'");
                                    }
                                    sqlWrapperFile = "CREATE VIEW" + " " + multiplesqlfile.split(" ")[3].trim().replace("\n", "").replace("\"", "") + " " + "AS" + " " + wrapperSqlQuery;
                                    //this line is used for metadataCreation
                                    getWrapperspecificationsForMetadataCreation(multiplesqlfile,multiplesqlfile.split(" ")[3].trim().replace("\n", "").replace("\"", ""));
                                    //                                                     return multiplesqlfile.split(" ")[3].trim().replaceAll("\n", "").replace("\"", "");                                               return sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "")+multiplesqlfile.split(" ")[3].replace("\n", "").replace("\"", "")+databaseName+sqlWrapperFile+dbTypes;

                                    writeFilesforSqlWrapper(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") ,multiplesqlfile.split(" ")[3].trim().replace("\n", "").replace("\"", ""),databaseName,sqlWrapperFile,dbTypes);

                                    multiplesqlfile = multiplesqlfile.replace(multiplesqlfile.substring(multiplesqlfile.indexOf("SQLSENTENCE="), multiplesqlfile.indexOf("OUTPUTSCHEMA")), "");
                                }//SQLSENTENCE


                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("/"), multiplesqlfile.indexOf("'", multiplesqlfile.indexOf("/")));

                                    fileFolderMap.put(multiplesqlfile.split(" ")[3].trim().replaceAll("\n", "")+ "Wrapper" + databaseName, folderName.trim());

                                }
                                // return multiplesqlfile+sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "");

                                var  sqlfile5 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[3].trim().replace("\n", "").replace("\"", "") + "Wrapper" + databaseName + ".sql");
                                FileUtils.writeStringToFile(sqlfile5, multiplesqlfile);

                            }//wrapper end




                            else if (multiplesqlfile.toUpperCase().contains("CREATE VIEW")) {
                                if (multiplesqlfile.toUpperCase().contains("VIEWSTATSUMMARY")){
                                    continue;
                                }

                                if (multiplesqlfile.toUpperCase().contains("CONTEXT")) {
                                    var contextIndex = multiplesqlfile.toUpperCase().indexOf("CONTEXT");
                                    var closedparenthesisInde = multiplesqlfile.toUpperCase().indexOf(")", contextIndex);
                                    var contextReplacement = multiplesqlfile.substring(contextIndex, closedparenthesisInde + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacement, "");
                                }
                                if (multiplesqlfile.toUpperCase().contains("PRIMARY KEY")) {
                                    var contextIndexP = multiplesqlfile.toUpperCase().indexOf("PRIMARY KEY");
                                    var closedparenthesisIndeP = multiplesqlfile.toUpperCase().indexOf(")", contextIndexP);
                                    var contextReplacementP = multiplesqlfile.substring(contextIndexP, closedparenthesisIndeP + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacementP, "");
                                }
                                if (multiplesqlfile.toUpperCase().contains("CAST")){
                                    for(var castIndex = 0 ; castIndex < multiplesqlfile.toLowerCase().split("cast").length ;
                                        castIndex++ ){
                                        var cast = multiplesqlfile.toLowerCase().split("cast")[castIndex];
                                        if (cast.indexOf("('") === 0) {
                                            multiplesqlfile = multiplesqlfile.replace(cast.substring(0, cast.indexOf(")") + 1), cast.substring(0, cast.indexOf(")") + 1).replace("',", " AS").replace("'", ""));
                                        }
                                    }
                                }
                                if (multiplesqlfile.contains("||'-00'")){
                                    multiplesqlfile=multiplesqlfile.replace("||'-00'", "");
                                }
                                if (!multiplesqlfile.contains("FROM")){
                                    tempForSemoColon=multiplesqlfile;
                                    continue;
                                }
                                multiplesqlfile = multiplesqlfile.split("CREATE VIEW")[1];
                                multiplesqlfile = "CREATE VIEW" + multiplesqlfile;
                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("FOLDER"), multiplesqlfile.indexOf("AS"));
                                    multiplesqlfile = multiplesqlfile.replace(folderName, "");

                                    //folderName = folderName.replace("FOLDER = '/", "");
                                    //multiplesqlfile = multiplesqlfile.replace("FOLDER = '/", "");
                                    folderName=folderName.split("'")[1].replaceFirst("/","");

                                    folderName = folderName.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replaceAll("FOLDER = \'.*\'", "");
                                    fileFolderMap.put(multiplesqlfile.split(" ")[2].trim().replaceAll("\n", "") + databaseName, folderName.trim());

                                }

                                var sqlfile = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "") + "#DB" + databaseName + ".sql");
                                System.out.println("ViewName="+multiplesqlfile.split(" ")[2].trim().replaceAll("\n", ""));
                                multiplesqlfile=ErwinUMDenodoDetailStarReplacementv1.executeForStarReplace(multiplesqlfile,dbTypes,tableColMapForStar);
                                FileUtils.writeStringToFile(sqlfile, multiplesqlfile);

                            }//else if

                            else if (multiplesqlfile.toUpperCase().contains("CREATE OR REPLACE VIEW")) {
                                if (multiplesqlfile.toUpperCase().contains("VIEWSTATSUMMARY")){
                                    continue;
                                }
                                if (multiplesqlfile.toUpperCase().contains("CONTEXT")) {
                                    var contextIndex = multiplesqlfile.toUpperCase().indexOf("CONTEXT");
                                    var closedparenthesisInde = multiplesqlfile.toUpperCase().indexOf(")", contextIndex);
                                    var contextReplacement = multiplesqlfile.substring(contextIndex, closedparenthesisInde + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacement, "");
                                }
                                if (multiplesqlfile.toUpperCase().contains("PRIMARY KEY")) {
                                    var contextIndexP = multiplesqlfile.toUpperCase().indexOf("PRIMARY KEY");
                                    var closedparenthesisIndeP = multiplesqlfile.toUpperCase().indexOf(")", contextIndexP);
                                    var contextReplacementP = multiplesqlfile.substring(contextIndexP, closedparenthesisIndeP + 1);
                                    multiplesqlfile = multiplesqlfile.replace(contextReplacementP, "");
                                }
                                if (multiplesqlfile.toUpperCase().contains("CAST")){
                                    for(var castIndex = 0 ; castIndex < multiplesqlfile.toLowerCase().split("cast").length ;
                                        castIndex++ ){
                                        var cast = multiplesqlfile.toLowerCase().split("cast")[castIndex];
                                        if (cast.indexOf("('") === 0) {
                                            multiplesqlfile = multiplesqlfile.replace(cast.substring(0, cast.indexOf(")") + 1), cast.substring(0, cast.indexOf(")") + 1).replace("',", " AS").replace("'", ""));
                                        }
                                    }
                                }
                                if (multiplesqlfile.contains("||'-00'")){
                                    multiplesqlfile=multiplesqlfile.replace("||'-00'", "");
                                }
                                multiplesqlfile = multiplesqlfile.split("CREATE OR REPLACE VIEW")[1];
                                multiplesqlfile = "CREATE OR REPLACE VIEW" + multiplesqlfile;
                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("FOLDER"), multiplesqlfile.indexOf("AS"));
                                    multiplesqlfile = multiplesqlfile.replace(folderName, "");

                                    //  folderName = folderName.replace("FOLDER = '/", "");
                                    //multiplesqlfile = multiplesqlfile.replace("FOLDER = '/", "");
                                    folderName=folderName.split("'")[1].replaceFirst("/","");
                                    folderName = folderName.replace("'", "");

                                    //                                multiplesqlfile = multiplesqlfile.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replaceAll("FOLDER = \'.*\'", "");
                                    fileFolderMap.put(multiplesqlfile.split(" ")[4].trim().replaceAll("\n", "") + databaseName, folderName.trim());

                                }


                                var sqlfile1 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[4].replace("\n", "").replace("\"", "") + "#DB" + databaseName + ".sql");
                                multiplesqlfile=ErwinUMDenodoDetailStarReplacementv1.executeForStarReplace(multiplesqlfile,dbTypes,tableColMapForStar);
                                FileUtils.writeStringToFile(sqlfile1, multiplesqlfile);
                            }//else if

                            else if (multiplesqlfile.toUpperCase().contains("CREATE ASSOCIATION")) {

                                multiplesqlfile = multiplesqlfile.split("CREATE ASSOCIATION")[1];
                                multiplesqlfile = "CREATE ASSOCIATION" + multiplesqlfile;
                                multiplesqlfile=multiplesqlfile.trim();

                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("FOLDER"), multiplesqlfile.indexOf("ENDPOINT"));
                                    multiplesqlfile = multiplesqlfile.replace(folderName, "");

                                    //folderName = folderName.replace("FOLDER = '/", "");
                                    //  multiplesqlfile = multiplesqlfile.replace("FOLDER = '/", "");
                                    folderName=folderName.split("'")[1].replaceFirst("/","");
                                    folderName = folderName.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replaceAll("FOLDER = \'.*\'", "");
                                    fileFolderMap.put(multiplesqlfile.split(" ")[2].trim().replaceAll("\n", "") + databaseName, folderName.trim());

                                }
                                //                                 return multiplesqlfile+"---"+multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "");

                                var sqlfile2 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "") + "Association" + databaseName + ".sql");
                                FileUtils.writeStringToFile(sqlfile2, multiplesqlfile);
                            }//else if

                            else if (multiplesqlfile.toUpperCase().contains("CREATE OR REPLACE ASSOCIATION")) {

                                multiplesqlfile = multiplesqlfile.split("CREATE OR REPLACE ASSOCIATION")[1];
                                multiplesqlfile = "CREATE ASSOCIATION" + multiplesqlfile;

                                if (multiplesqlfile.contains("FOLDER")) {
                                    folderName = multiplesqlfile.substring(multiplesqlfile.indexOf("FOLDER"), multiplesqlfile.indexOf("ENDPOINT"));
                                    multiplesqlfile = multiplesqlfile.replace(folderName, "");

                                    // folderName = folderName.replace("FOLDER = '/", "");
                                    // multiplesqlfile = multiplesqlfile.replace("FOLDER = '/", "");
                                    folderName=folderName.split("'")[1].replaceFirst("/","");
                                    folderName = folderName.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replace("'", "");
                                    //                                multiplesqlfile = multiplesqlfile.replaceAll("FOLDER = \'.*\'", "");
                                    fileFolderMap.put(multiplesqlfile.split(" ")[2].trim().replaceAll("\n", "") + databaseName, folderName.trim());


                                }

                                var sqlfile3 = new File(sqlfilearr[i].getAbsolutePath().replace(sqlfilearr[i].getName(), "") + "output" + "\\" + multiplesqlfile.split(" ")[2].replace("\n", "").replace("\"", "") + "Association" + databaseName + ".sql");
                                FileUtils.writeStringToFile(sqlfile3, multiplesqlfile);

                            }//else if
                        }
                        catch(e){
                            continue;
                        }
                    }//for

                }
            }
        }

    }
    catch(e){
        return e;
    }
    //return fileFolderMap;
}



function createMetadata(sysutil,srcSystem,srcEnv,metaDataMap) {
    try {
        if (metaDataMap.size() > 0) {
            //get systemId
            var systemId = sysutil.getSystemId(srcSystem);
            if (systemId > 0) {
                //get EnvironmentId
                var envId = sysutil.getEnvironmentId(systemId, srcEnv);
                if (envId > 0) {
                    //iterate over Map And Get acess to all Tables
                    var metaDataMapEntrySet = metaDataMap.entrySet();
                    //get Iterator Object
                    var metaDataMapIterator = metaDataMapEntrySet.iterator();
                    while (metaDataMapIterator.hasNext()) {
                        var entry = metaDataMapIterator.next();
                        var tableName = entry.getKey();
                        try {
                            var tableId = sysutil.getTableId(envId, tableName);
                            if (tableId > 0) {
                                System.out.println("Table Already is Present");
                            }
                            else {
                                //here goes table Creation logic in metadamodule
                                var sMTable = new SMTable();
                                sMTable.setEnvironmentId(envId);
                                //                                     sMTable.setSystemEnvironmentName(srcEnv);
                                sMTable.setTableName(tableName);
                                sMTable.setTableType(SMTable.SMTableType.TABLE);

                                //create table
                                sysutil.createTable(sMTable);
                                //get the tableId
                                tableId = sysutil.getTableId(envId, tableName);
                                //now create Smcolumn
                                var val = entry.getValue();
                                var valEntrySet = val.entrySet();
                                var valItearor = valEntrySet.iterator();
                                while (valItearor.hasNext()) {
                                    var valEntry = valItearor.next();
                                    var columnName = valEntry.getKey();
                                    var dataType = valEntry.getValue();
                                    //now create a SmColumnobject
                                    var sMColumn = new SMColumn();
                                    sMColumn.setTableId(tableId);
                                    sMColumn.setColumnName(columnName);
                                    if (dataType.trim().contains("##")) {
                                        sMColumn.setColumnDatatype(dataType.split("##")[1]);
                                    }
                                    sMColumn.setColumnType(SMColumn.SMColumnType.ENTITY_ATTRIBUTE);
                                    sysutil.createColumn(sMColumn);
                                }
                            }
                        }
                        catch (e) {
                            throw e;
                        }
                    }
                }
            }
        }
    }
    catch (e) {
        throw e;
    }
}







function writeFilesforSqlWrapper(filePath,filename,databaseName,fileContent,dbTypes){
    try{

        var  sqlfile5 = new File(filePath + "output" + "\\" + filename+ "NonRelatedwprs" + databaseName + ".sql");
        fileContent=ErwinUMDenodoDetailStarReplacementv1.executeForStarReplace(fileContent,dbTypes,tableColMapForStar);
        FileUtils.writeStringToFile(sqlfile5, fileContent);
    }
    catch(e){
        var exceptionLog = new StringWriter();

        message.append("Exception In writeFilesforSqlWrapper() \n" + exceptionLog.toString());
        message.append("\n ================================");
        return exceptionLog.toString()+ex+"Exception is here 623";
    }

}

function createBiQueryAndAssociationMappings( map,  filepath,  projectId,
                                               mappingManagerUtil,  keyValueUtil,  domainUrl,  dataBaseName,  userName,
                                               Password,  srcSystemName,  srcEnvironmentName,
                                               tgtSystemName,  tgtEnvironmentName,  systemManagereUtil,  mapVersionCheck,vParentSubjectId,host,vdatabaseName) {

    message = new StringBuilder();
    var fileList = filepath.listFiles();

    var systemEnvMap = new HashMap();
    var systemEnvMapForView = new HashMap();
    var wrapperTableObject = new DenodoTablesWrapper();
    var tempMapspeclist="";
    var getExtremeTarget= "";
    var environmentId=0;
    var tableColumnSet=null;
    var tableName="";
    var tableId=0;
    var eachtablecoliter=null;

    try {

        project = mappingManagerUtil.getProject(projectId);
        projectName = project.getProjectName();
        if (fileList.length === 0) {
            message.append("There may be no association and views in vql files");

        }
        else {
            //associationwrapper
            for (var js = 0; js < fileList.length; js++) {
                var filepath1 = fileList[js].getAbsolutePath();
                //return filepath1;
                //                 filepath1 = fileList[js].getName().replace("\\.", "");
                filepath1 = fileList[js].getName().replace(".sql", "");
                if (fileList[js].getAbsolutePath().contains("Association")) {


                    //                     continue;//for checking purpose added this line and also comment all line down

                    var asDbName = filepath1.split("Association")[1];
                    filepath1 = filepath1.replace(filepath1.split("Association")[1], "");
                    filepath1 = filepath1.replace("Association", "");

                    subjectName = map.get(filepath1.trim() + asDbName);
                    if (map.get(filepath1.trim() + asDbName) === null) {
                        listSubjectNames = fileList[js].getName().replace(".sql", "").split("/");

                    }
                    else {
                        subjectName = subjectName.replace("FOLDER = '/", "");
                        subjectName = subjectName.replace("'", "");
                        listSubjectNames = subjectName.split("/");
                    }
                    associationMappings(map, fileList[js].getAbsolutePath(), domainUrl, userName,
                                        Password, srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, mappingManagerUtil, projectId, systemEnvMap, systemManagereUtil, keyValueUtil, mapVersionCheck,vParentSubjectId);

                }
                // for wrapper files and table files 
                else   if (fileList[js].getAbsolutePath().contains("Wrapper")) {

                    getWrapperspecifications(fileList[js].getAbsolutePath());

                }

                else  if (fileList[js].getAbsolutePath().contains("Table")) {
                    gettableSpecifications(fileList[js].getAbsolutePath());

                }
                else if(fileList[js].getAbsolutePath().contains("NonRelatedwprs")){

                    //return "hello";
                    var DBName = filepath1.split("NonRelatedwprs")[1];
                    filepath1 = filepath1.split("NonRelatedwprs")[0];
                    subjectName = map.get(filepath1.trim() +"Wrapper"+ DBName);
                    if (map.get(filepath1.trim() +"Wrapper"+ DBName) === null) {
                        listSubjectNames = filepath1.trim().split("/");

                    }

                    else {

                        listSubjectNames = subjectName.split("/");
                    }

                    // for starts
                    for (var s = 0; s < listSubjectNames.length; s++) {

                        if (s === 0) {
                            parentName = DBName;
                            if(vParentSubjectId === -1 || vParentSubjectId === 0){
                                parentSubectId = createParentSubject(projectName, projectId, mappingManagerUtil, parentName);
                            }
                            else{
                                mappingManagerUtil.createSubject(projectId, vParentSubjectId, parentName);
                                parentSubectId = mappingManagerUtil.getSubjectId(vParentSubjectId, Node.NodeType.MM_SUBJECT, parentName);
                            }
                            if (listSubjectNames[0].equals("")) {
                                continue;
                            }

                            parentName = listSubjectNames[s];
                            var mapNamess = fileList[js].getName().split("NonRelatedwprs")[0];
                            mapNamess=mapNamess+"_wrapper";
                            if (!parentName.equalsIgnoreCase(mapNamess)) {

                                mappingManagerUtil.createSubject(projectId, parentSubectId, parentName);
                                parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, parentName);

                            }

                            if (listSubjectNames.length == 1) {
                                var startTime=System.currentTimeMillis();
                                var mappObj = erwinSqlParser.sqlToDataflow(fileList[js].getAbsolutePath(),
                                                                           srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, dataBaseName,
                                                                           mapNamess, parentSubectId, projectId);

                                var endTime=System.currentTimeMillis();
                                message.append("\nGsp Parser consume time in milisecond="+(endTime-startTime)+"\n");


                                if(mappObj === null){
                                    message.append("\n "+mapNamess+"  view query not created mappings."+"\n");
                                    continue;
                                }

                                var tempMapName=mappObj.getMappingName();
                                if(tempMapName.length()>250){
                                    mappObj.setMappingName(tempMapName.replaceAll("\\.","_").substring(0,250));
                                }
                                else {
                                    mappObj.setMappingName(tempMapName.replaceAll("\\.","_"));
                                }

                                tempMapspeclist=mappObj.getMappingSpecifications();
                                getExtremeTarget=  getTargetMethod(tempMapspeclist);
                                extremetgttabcolumns(tempMapspeclist, getExtremeTarget);


                                var mapObj = metadataSync(envMap,mappObj,systemManagereUtil,projectId,parentSubectId,mappObj.getMappingName(),columnsInfoMap,srcSystemName,srcEnvironmentName,tgtSystemName,tgtEnvironmentName);

                                if(mapObj===null){
                                    mapObj=mappObj;
                                    message.append("\n "+mapNamess+" sync up error."+"\n");

                                }

                                if(mapObj === null){
                                    message.append("\n "+mapNamess+"  view query not created mappings."+"\n");
                                    continue;
                                }

                                //changeMapSpecificationsForJoin
                                //table name keeping _+mapname
                                ErwinUMDenodoSqlPsDetailv2.changeMapSpecificationsForJoin(mapObj,mapObj.getMappingName());

                                var mapId = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);


                                if (mapId > 0) {
                                    if (mapVersionCheck.equals("true")) {
                                        var mappingName = mapObj.getMappingName();
                                        var extractQuery = mapObj.getSourceExtractQuery();
                                        var  mapspecList = mapObj.getMappingSpecifications();
                                        var latestMappingObjet = creatingMapVersion(projectId, mappingName, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                        var latestMapId = latestMappingObjet.getMappingId();
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());

                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                    }
                                    else {
                                        var mappingName = mapObj.getMappingName();
                                        latestMappingVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
                                        if (latestMappingVersion.size() == 1) {
                                            mappingManagerUtil.deleteMapping(mapId);
                                            message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                            var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                            var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                            var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                            message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                        }
                                        else {
                                            updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
                                            mappingManagerUtil.deleteMapping(mapId, APIConstants.VersionMode.SPECIFIC_VERSION, updateMappingVersion);
                                            var mappingName1 = mapObj.getMappingName();
                                            var extractQuery = mapObj.getSourceExtractQuery();
                                            var mapspecList = mapObj.getMappingSpecifications();
                                            var latestMappingObjet = creatingMapVersion(projectId, mappingName1, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                            var latestMapId = latestMappingObjet.getMappingId();
                                            var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                            var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                            message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                        }
                                    }
                                    //                                       
                                }
                                else {
                                    //                                    return mapObj;
                                    message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                    var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                    var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                    keyValeuMap.put("Type","wrappersqlquery");

                                    var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                    message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                }
                            }
                        }
                        // if completed
                        else if (listSubjectNames[s] == listSubjectNames[listSubjectNames.length - 1]) {
                            SubparentName = listSubjectNames[s];

                            mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                            parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

                            var tempName = fileList[js].getName().split("NonRelatedwprs")[0];
                            tempName=tempName+"_wrapper";

                            var stratGspTime=System.currentTimeMillis();

                            var  mappObj = erwinSqlParser.sqlToDataflow(fileList[js].getAbsolutePath(), srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, dataBaseName,
                                                                        tempName, parentSubectId, projectId);
                            if(mappObj === null){
                                message.append("\n "+tempName+" view query not created mappings."+"\n");
                                continue;
                            }
                            var tempMapName=mappObj.getMappingName();
                            if(tempMapName.length()>250){
                                mappObj.setMappingName(tempMapName.replaceAll("\\.","_").substring(0,250));
                            }
                            else {
                                mappObj.setMappingName(tempMapName.replaceAll("\\.","_"));
                            }
                            var endGspTime=System.currentTimeMillis();
                            message.append("\nGsp Parser consume time in milisecond="+(endGspTime-stratGspTime)+"\n");

                            tempMapspeclist=mappObj.getMappingSpecifications();
                            getExtremeTarget=  getTargetMethod(tempMapspeclist);
                            extremetgttabcolumns(tempMapspeclist, getExtremeTarget);


                            var mapObj = metadataSync(envMap,mappObj,systemManagereUtil,projectId,parentSubectId,mappObj.getMappingName(),columnsInfoMap,srcSystemName,srcEnvironmentName,tgtSystemName,tgtEnvironmentName);


                            if(mapObj===null){
                                mapObj=mappObj;
                                message.append("\n "+mapNamess+" sync up error."+"\n");

                            }

                            if(mapObj === null){
                                message.append("\n "+tempName+" view query not created mappings."+"\n");
                                continue;
                            }

                            //changeMapSpecificationsForJoin
                            //table name keeping _+mapname
                            ErwinUMDenodoSqlPsDetailv2.changeMapSpecificationsForJoin(mapObj,mapObj.getMappingName());

                            var mapId = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);



                            if (mapId > 0) {
                                if (mapVersionCheck.equals("true")) {
                                    var mappingName = mapObj.getMappingName();
                                    var extractQuery = mapObj.getSourceExtractQuery();
                                    var mapspecList = mapObj.getMappingSpecifications();
                                    var latestMappingObjet = creatingMapVersion(projectId, mappingName, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                    var latestMapId = latestMappingObjet.getMappingId();
                                    var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                    var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                    message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                }
                                else {
                                    var mappingName = mapObj.getMappingName();
                                    latestMappingVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
                                    if (latestMappingVersion.size() == 1) {
                                        mappingManagerUtil.deleteMapping(mapId);
                                        message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                        var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                    }
                                    else {
                                        updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
                                        mappingManagerUtil.deleteMapping(mapId, APIConstants.VersionMode.SPECIFIC_VERSION, updateMappingVersion);
                                        var mappingName1 = mapObj.getMappingName();
                                        var extractQuery = mapObj.getSourceExtractQuery();
                                        var mapspecList = mapObj.getMappingSpecifications();
                                        var latestMappingObjet = creatingMapVersion(projectId, mappingName1, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                        var latestMapId = latestMappingObjet.getMappingId();
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                    }
                                }

                            }
                            else {

                                message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                keyValeuMap.put("Type","wrappersqlquery");
                                var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                            }
                            //                               
                        }// elseifcompleted

                        else {
                            SubparentName = listSubjectNames[s];

                            mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                            parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

                        }

                    }//  for ends


                }//NonRelatedwprs

                else {
                    var DBName = filepath1.split("#DB")[1];
                    filepath1 = filepath1.split("#DB")[0];
                    subjectName = map.get(filepath1.trim() + DBName);
                    if (map.get(filepath1.trim() + DBName) === null) {
                        listSubjectNames = filepath1.trim().split("/");

                    }
                    else {
                        subjectName = subjectName.replace("FOLDER = '/", "");
                        subjectName = subjectName.replace("'", "");
                        listSubjectNames = subjectName.split("/");
                    }

                    for (var s = 0; s < listSubjectNames.length; s++) {
                        if (s === 0) {
                            parentName = DBName;
                            if(vParentSubjectId === -1 || vParentSubjectId === 0){
                                parentSubectId = createParentSubject(projectName, projectId, mappingManagerUtil, parentName);
                            }
                            else{
                                mappingManagerUtil.createSubject(projectId, vParentSubjectId, parentName);
                                parentSubectId = mappingManagerUtil.getSubjectId(vParentSubjectId, Node.NodeType.MM_SUBJECT, parentName);
                            }

                            parentName = listSubjectNames[s];
                            var mapNamess = fileList[js].getName().split("#DB")[0];
                            if (!parentName.equalsIgnoreCase(mapNamess)) {

                                mappingManagerUtil.createSubject(projectId, parentSubectId, parentName);
                                parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, parentName);

                            }

                            if (listSubjectNames.length == 1) {
                                var startTime=System.currentTimeMillis();
                                var mappObj = erwinSqlParser.sqlToDataflow(fileList[js].getAbsolutePath(),
                                                                           srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, dataBaseName,
                                                                           mapNamess, parentSubectId, projectId);

                                var endTime=System.currentTimeMillis();
                                message.append("\nGsp Parser consume time in milisecond="+(endTime-startTime)+"\n");
                                if(mappObj === null){
                                    message.append("\n "+mapNamess+"  view query not created mappings."+"\n");
                                    continue;
                                }
                                var tempMapName=mappObj.getMappingName();
                                if(tempMapName.length()>250){
                                    mappObj.setMappingName(tempMapName.replaceAll("\\.","_").substring(0,250));
                                }
                                else {
                                    mappObj.setMappingName(tempMapName.replaceAll("\\.","_"));
                                }

                                var mapObj = metadataSync(envMap,mappObj,systemManagereUtil,projectId,parentSubectId,mappObj.getMappingName(),columnsInfoMap,srcSystemName,srcEnvironmentName,tgtSystemName,tgtEnvironmentName);

                                if(mapObj===null){
                                    mapObj=mappObj;
                                    message.append("\n "+mapNamess+" sync up error."+"\n");

                                }

                                if(mapObj === null){
                                    message.append("\n "+mapNamess+"  view query not created mappings."+"\n");
                                    continue;
                                }

                                //changeMapSpecificationsForJoin
                                //table name keeping _+mapname
                                ErwinUMDenodoSqlPsDetailv2.changeMapSpecificationsForJoin(mapObj,mapObj.getMappingName());

                                var mapId = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);



                                if (mapId > 0) {
                                    if (mapVersionCheck.equals("true")) {
                                        var mappingName = mapObj.getMappingName();
                                        var extractQuery = mapObj.getSourceExtractQuery();
                                        var  mapspecList = mapObj.getMappingSpecifications();
                                        var latestMappingObjet = creatingMapVersion(projectId, mappingName, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                        var latestMapId = latestMappingObjet.getMappingId();
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                    }
                                    else {
                                        var mappingName = mapObj.getMappingName();
                                        latestMappingVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
                                        if (latestMappingVersion.size() == 1) {
                                            mappingManagerUtil.deleteMapping(mapId);
                                            message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                            var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                            var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                            var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                            message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                        }
                                        else {
                                            updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
                                            mappingManagerUtil.deleteMapping(mapId, APIConstants.VersionMode.SPECIFIC_VERSION, updateMappingVersion);
                                            var mappingName1 = mapObj.getMappingName();
                                            var extractQuery = mapObj.getSourceExtractQuery();
                                            var mapspecList = mapObj.getMappingSpecifications();
                                            var latestMappingObjet = creatingMapVersion(projectId, mappingName1, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                            var latestMapId = latestMappingObjet.getMappingId();
                                            var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                            var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                            message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                        }
                                    }
                                    //                                       
                                }
                                else {
                                    //                                    return mapObj;
                                    message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                    var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                    var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                    var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                    message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                }
                            }
                        }
                        else if (listSubjectNames[s] == listSubjectNames[listSubjectNames.length - 1]) {
                            SubparentName = listSubjectNames[s];

                            mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                            parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

                            var tempName = fileList[js].getName().split("#DB")[0];
                            var stratGspTime=System.currentTimeMillis();

                            var  mappObj = erwinSqlParser.sqlToDataflow(fileList[js].getAbsolutePath(), srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, dataBaseName,
                                                                        tempName, parentSubectId, projectId);

                            var endGspTime=System.currentTimeMillis();
                            message.append("\nGsp Parser consume time in milisecond="+(endGspTime-stratGspTime)+"\n");
                            if(mappObj === null){
                                message.append("\n "+tempName+" view query not created mappings."+"\n");
                                continue;
                            }

                            var tempMapName=mappObj.getMappingName();
                            if(tempMapName.length()>250){
                                mappObj.setMappingName(tempMapName.replaceAll("\\.","_").substring(0,250));
                            }
                            else {
                                mappObj.setMappingName(tempMapName.replaceAll("\\.","_"));
                            }
                            var mapObj = metadataSync(envMap,mappObj,systemManagereUtil,projectId,parentSubectId,mappObj.getMappingName(),columnsInfoMap,srcSystemName,srcEnvironmentName,tgtSystemName,tgtEnvironmentName);


                            if(mapObj===null){
                                mapObj=mappObj;
                                message.append("\n "+mapNamess+" sync up error."+"\n");

                            }

                            if(mapObj === null){
                                message.append("\n "+tempName+" view query not created mappings."+"\n");
                                continue;
                            }


                            //changeMapSpecificationsForJoin
                            //table name keeping _+mapname
                            ErwinUMDenodoSqlPsDetailv2.changeMapSpecificationsForJoin(mapObj,mapObj.getMappingName());

                            var mapId = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);



                            if (mapId > 0) {
                                if (mapVersionCheck.equals("true")) {
                                    var mappingName = mapObj.getMappingName();
                                    var extractQuery = mapObj.getSourceExtractQuery();
                                    var mapspecList = mapObj.getMappingSpecifications();
                                    var latestMappingObjet = creatingMapVersion(projectId, mappingName, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                    var latestMapId = latestMappingObjet.getMappingId();
                                    var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                    var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                    message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                }
                                else {
                                    var mappingName = mapObj.getMappingName();
                                    latestMappingVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
                                    if (latestMappingVersion.size() == 1) {
                                        mappingManagerUtil.deleteMapping(mapId);
                                        message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                        var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                                    }
                                    else {
                                        updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
                                        mappingManagerUtil.deleteMapping(mapId, APIConstants.VersionMode.SPECIFIC_VERSION, updateMappingVersion);
                                        var mappingName1 = mapObj.getMappingName();
                                        var extractQuery = mapObj.getSourceExtractQuery();
                                        var mapspecList = mapObj.getMappingSpecifications();
                                        var latestMappingObjet = creatingMapVersion(projectId, mappingName1, parentSubectId, extractQuery, mapspecList, keyValueUtil, mappingManagerUtil);
                                        var latestMapId = latestMappingObjet.getMappingId();
                                        var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                        var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                        message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", latestMapId + "").getStatusMessage() + "\n");
                                    }
                                }

                            }
                            else {

                                message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                                var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                                var keyValeuMap = new LinkedHashMap(erwinSqlParser.getKeyvalueJson());
                                var updateKeyValue =updateExtendedPropertiesForAbove500Character(keyValeuMap);
                                message.append(keyValueUtil.addKeyValueMap(updateKeyValue, "8", mapIdO + "").getStatusMessage() + "\n");
                            }
                            //                               
                        }
                        else {
                            SubparentName = listSubjectNames[s];

                            mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                            parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

                        }

                    }
                }
            }// for
        }//else

        wrapperTableObject.MappingCreation(finalTableColumnMap, finalTableWrapperMap, totalConnectionDetailsMap, Sorcesystem, srcEnv, trgsytem, tgrtEnv, projectId, projectName, mappingManagerUtil,SystemenvironmentDetails,fallbackSystem,fallbackEnv,vParentSubjectId,keyValueUtil);



        var systemId= systemManagereUtil.getSystemId(srcSystemName);
        if(systemId>0){
            environmentId= systemManagereUtil.getEnvironmentId(systemId, srcEnvironmentName);
            if(environmentId>0){
                //System.out.println("tacolMap ===+"+tacol);
                tableColumnSet= tacol.entrySet().iterator();


                while(tableColumnSet.hasNext()){
                    eachtablecoliter =  tableColumnSet.next();
                    tableName= eachtablecoliter.getKey();

                    tableId= systemManagereUtil.getTableId(environmentId, tableName);
                    //return tableId;
                    if(tableId>0){

                        message.append("\n "+tableName+" already table present."+"\n");
                        continue;

                    }
                    else{
                        var smTableObj = new SMTable();
                        smTableObj.setEnvironmentId(environmentId);
                        smTableObj.setSystemEnvironmentName(srcEnvironmentName);

                        smTableObj.setTableName(tableName);
                        smTableObj.setTableType(SMTable.SMTableType.TABLE);

                        systemManagereUtil.createTable(smTableObj);
                        tableId= systemManagereUtil.getTableId(environmentId, tableName);

                        var columnList= eachtablecoliter.getValue();
                        var setOfColumns = new ArrayList(columnList);
                        for(var coli=0;coli<setOfColumns.size();
                            coli++){
                            var collumnNamee= setOfColumns.get(coli);
                            var sMColumn = new SMColumn();
                            sMColumn.setTableId(tableId);
                            sMColumn.setColumnName(collumnNamee);
                            sMColumn.setColumnType(SMColumn.SMColumnType.ENTITY_ATTRIBUTE);

                            systemManagereUtil.createColumn(sMColumn);
                        }
                    }
                }



            }
        }



    }

    catch (ex) {
        //            Logger.getLogger(DenodoQueryMappings.class.getName()).log(Level.SEVERE, null, ex);
        var exceptionLog = new StringWriter();

        message.append("Exception In createBiQueryAndAssociationMappings() \n" + exceptionLog.toString());
        message.append("\n ================================");
        message.append(exceptionLog.toString()+ex+"Exception is here 1046"+"\n ");
        //         return exceptionLog.toString()+ex+"Exception is here 619";
    }
    finally {
        return message.toString();

    }

    return message.toString();
}




function createMetatDataForCreateWrapperQueries(srcSystem,srcEnv){
    try{


    }
    catch(e){

    }

}




function getDatabasePropertiesMap(hostName,portNumber,userName,password,databaseName,domainUrl){
    try{
        databasePropertiesMap.put("databaseType","SqlServer");
        databasePropertiesMap.put("databaseName",databaseName);
        databasePropertiesMap.put("databaseUserName",userName);
        databasePropertiesMap.put("databasePassword",password);
        databasePropertiesMap.put("databaseURL",domainUrl);
        databasePropertiesMap.put("databaseDriver","com.microsoft.sqlserver.jdbc.SQLServerDriver");
        databasePropertiesMap.put("databaseIPAddress",hostName);
        databasePropertiesMap.put("databasePort",portNumber);
    }
    catch(e){
        globalMessage.append(e+"\n");

        return " Unable to put database properties \n "+e;
    }
    return databasePropertiesMap;
}

//// metadata creation methods
function  getTargetMethod(speclist) {
    var linkmap = new LinkedHashMap();
    try{
        var iterator1=speclist.iterator();
        //iterator through mapspeclist
        while(iterator1.hasNext()){
            //get element from Arraylist
            var mappingSpecificationRow=iterator1.next();

            var sourcetableName = mappingSpecificationRow.getSourceTableName();
            var targetTableName = mappingSpecificationRow.getTargetTableName();
            if ("".equals(sourcetableName.trim()) || "".equals(targetTableName.trim())) {
                continue;
            }
            linkmap.put(sourcetableName, targetTableName);

        }

        //         Set<String> sourceSet = getSource(linkmap);
        var getTarget = getTargetV(linkmap);
    }
    catch(v){
        return v;
    }

    return getTarget;
}
function getTargetV( sourceAndTargetMap) {
    var extSet = sourceAndTargetMap.keySet();
    var valuesSet = new HashSet(sourceAndTargetMap.values());

    var extreamSourceSet = new HashSet();
    var extreamTargetSet = new HashSet();

    var extreamSourceSetItr = extSet.iterator();
    var extreamTargetSetItr = valuesSet.iterator();

    //         while (extreamSourceSetItr.hasNext()) {
    //             var key = extreamSourceSetItr.next();
    //             var flag = getExtreamSource(key, valuesSet);
    //             if (flag) {
    //                 extreamSourceSet.add(key);
    //             }
    //         }

    while (extreamTargetSetItr.hasNext()) {
        var key = extreamTargetSetItr.next();
        if(key.contains("RESULT_OF")||key.contains("UPDATE")){
            continue;
        }
        var flag = getExtreamSourceV(key, extSet);
        if (flag) {

            extreamTargetSet.add(key.replaceAll("`", ""));
        }
    }

    //        System.out.println("extreamSourceSet..." + extreamSourceSet);
    //        System.out.println("extreamTargetSet..." + extreamTargetSet);
    return extreamTargetSet;
}
function getExtreamSourceV( key,  valueSet) {

    var valueSetIterator = valueSet.iterator();

    while (valueSetIterator.hasNext()) {
        var value = valueSetIterator.next();
        if (key.equalsIgnoreCase(value)) {
            return false;
        }

    }
    return true;
}
function extremetgttabcolumns( mapspeclist,  getExtremeTarget) {

    try {
        var iter = mapspeclist.iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var targettableName = row.getTargetTableName();
            var extremetarget = new LinkedList(getExtremeTarget);

            //                String extremetargetTableName = extremetarget.get(0);
            //
            //                extremetargetTableName = extremetargetTableName.replace("`", "");
            //                    if (extremetargetTableName.equalsIgnoreCase(targettableName)) {
            if (extremetarget.contains(targettableName)) {

                var columns = getcolumnsV(mapspeclist, targettableName);
                tacol.put(targettableName, columns);


            }

        }
    }
    catch (e) {
        e.printStackTrace();
    }

    //return tacol;

}
function getcolumnsV(mapspeclist,  targetTableName) {
    var columndetails = new HashSet();
    try {
        var iter = mapspeclist.iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var targettableName = row.getTargetTableName();
            if (targetTableName.equalsIgnoreCase(targettableName)) {
                var targetColumn = row.getTargetColumnName();
                columndetails.add(targetColumn);
            }
        }

    }
    catch ( e) {
        e.printStackTrace();
    }

    return columndetails;
}




function updateExtendedPropertiesForAbove500Character(keyValueMaps){
    var updateKeyValueMap=new LinkedHashMap();
    try{
        for (var i in keyValueMaps) {
            if(i.contains("Joincondition")){
                continue;
            }
            var value= keyValueMaps[i];
            if( value.length > 500){
                value=value.substring(0, 499);
                updateKeyValueMap.put(i,value);
            }
            else{
                updateKeyValueMap.put(i,value);
            }

        }

    }
    catch(ext){
        message.append("Exception In updateExtendedPropertiesForAbove500Character() \n" + ext);
        message.append("\n ================================");
    }
    return updateKeyValueMap;

}


function updateMapSpec( systemEnvMapForView,
                         systemManagereUtil,  sorcSystemName,  sorcEnvironmentName,
                         tagtSystemName,  tagtEnvironmentName) {
    var mapSPecsLists = mapObj.getMappingSpecifications();

    try {
        var sourceTable = "";
        var targetTable = "";
        var srcSystemName = "";
        var srcEnvironmentName = "";
        var tgtSystemName = "";
        var tgtEnvironmentName = "";
        var forSourceCheck = false;
        var forTargetCheck = false;

        for (var mapSPec in mapSPecsLists) {
            var mapSPecs=mapSPecsLists[mapSPec];
            sourceTable = mapSPecs.getSourceTableName();
            targetTable = mapSPecs.getTargetTableName();
            if ("".equals(sourceTable.trim()) || "".equals(targetTable.trim())) {
                continue;
            }
            if (getSystemEnvMapForView.get(sourceTable) === null) {
                for (var entry2 in systemEnvMapForView) {
                    var metadataSystem = entry2;
                    var metadataEnv = systemEnvMapForView[entry2];

                    var envList = metadataEnv.split("@");

                    for (var i = 0; i < envList.length; i++) {
                        try {
                            if (!forSourceCheck) {
                                var srcTabId = systemManagereUtil.getTableId(metadataSystem.split("#ERWININC#")[0], envList[i].split("#")[0], sourceTable);
                                //                                        var srcColId = systemManagereUtil.getColumnId(srcTabId, srcColumnName);
                                if (srcTabId > 0) {
                                    srcSystemName = metadataSystem.split("#ERWININC#")[0];
                                    srcEnvironmentName = envList[i].split("#")[0];
                                    getSystemEnvMapForView.put(sourceTable, srcSystemName + "@@" + srcEnvironmentName);
                                    forSourceCheck = true;
                                }
                            }
                            if (!forTargetCheck) {
                                var TgtTabId = systemManagereUtil.getTableId(metadataSystem.split("#ERWININC#")[0], envList[i].split("#")[0], targetTable);
                                //                                        var tgtColId = systemManagereUtil.getColumnId(TgtTabId, tgtColumnName);

                                if (TgtTabId > 0) {
                                    tgtSystemName = metadataSystem.split("#ERWININC#")[0];
                                    tgtEnvironmentName = envList[i].split("#")[0];
                                    getSystemEnvMapForView.put(targetTable, tgtSystemName + "@@" + tgtEnvironmentName);
                                    forTargetCheck = true;
                                }
                            }

                            if (forSourceCheck && forTargetCheck) {
                                break;
                            }

                        }
                        catch ( ex) {

                            message.append("Exception In updateMapSpec() \n" + ex);
                            message.append("\n ================================");
                        }

                    }
                }
                forSourceCheck = false;
                forTargetCheck = false;

            }
            else {
                srcSystemName = getSystemEnvMapForView.get(sourceTable).split("@@")[0];
                srcEnvironmentName = getSystemEnvMapForView.get(sourceTable).split("@@")[1];
                if (getSystemEnvMapForView.get(targetTable) == null) {
                    for (var entry2 in systemEnvMapForView) {
                        var metadataSystem = entry2;
                        var metadataEnv = systemEnvMapForView[entry2];

                        var envList = metadataEnv.split("@");

                        for (var i = 0; i < envList.length; i++) {

                            try {

                                if (!forTargetCheck) {
                                    var TgtTabId = systemManagereUtil.getTableId(metadataSystem.split("\\$")[0], envList[i].split("#")[0], targetTable);
                                    //                                        var tgtColId = systemManagereUtil.getColumnId(TgtTabId, tgtColumnName);

                                    if (TgtTabId > 0) {
                                        tgtSystemName = metadataSystem.split("\\$")[0];
                                        tgtEnvironmentName = envList[i].split("#")[0];
                                        getSystemEnvMapForView.put(targetTable, tgtSystemName + "@@" + tgtEnvironmentName);
                                        forTargetCheck = true;
                                    }
                                }

                                if (forTargetCheck) {
                                    break;
                                }

                            }
                            catch ( ex) {

                                message.append("Exception In updateMapSpec() \n" + ex);
                                message.append("\n ================================");
                            }
                        }
                    }
                    forTargetCheck = false;
                }
                else {
                    tgtSystemName = getSystemEnvMapForView.get(targetTable).split("@@")[0];
                    tgtEnvironmentName = getSystemEnvMapForView.get(targetTable).split("@@")[1];
                }
            }
            if (!"".equals(srcSystemName) && !"".equals(srcEnvironmentName)) {
                mapSPecs.setSourceSystemName(srcSystemName);
                mapSPecs.setSourceSystemEnvironmentName(srcEnvironmentName);
            }
            if (!"".equals(tgtSystemName) && !"".equals(tgtEnvironmentName)) {
                mapSPecs.setTargetSystemName(tgtSystemName);
                mapSPecs.setTargetSystemEnvironmentName(tgtEnvironmentName);
            }
            srcSystemName = sorcSystemName;
            srcEnvironmentName = sorcEnvironmentName;
            tgtSystemName = tagtSystemName;
            tgtEnvironmentName = tagtEnvironmentName;
        }
    }
    catch ( e) {

        message.append("Exception In updateMapSpec() \n" + e);
        message.append("\n ================================");
    }
    return mapSPecsLists;
}

//// for wrapper specification


function getWrapperspecifications(filePath) {

    try {
        var tableName = "";
        var keyColumnName = "";
        var valueColumnName = "";
        var schemaName = "";
        var ColumnNames = "";
        var dataSourceName = "";
        var folderName = "";
        var columnDataType = "";
        var outputSchemaData = "";

        //         var sourcetargetcolumnMap = new HashMap();
        //         var datasfolderMap = new HashMap();
        //         var columnAndFolderInfoMap = new HashMap();
        //         var tableAndColumnMap = new HashMap();


        var wrapperFile = new File(filePath);
        var baseFileName = wrapperFile.getName().replace(".sql", "");
        var dbName = baseFileName.split("Wrapper")[1];
        var wrapperFileContent = FileUtils.readFileToString(wrapperFile);
        if (wrapperFileContent.contains("OUTPUTSCHEMA")) {
            outputSchemaData = wrapperFileContent.substring(wrapperFileContent.indexOf("OUTPUTSCHEMA"), wrapperFileContent.lastIndexOf(")"));

        }
        var wrapperArrays = wrapperFileContent.split("\n");
        for (var wr=0;wr<wrapperArrays.length;wr++) {
            var wrapperarr=wrapperArrays[wr];
            if (wrapperarr.contains("DATASOURCENAME")) {

                dataSourceName = wrapperarr.split("=")[1];
            }
            else if (wrapperarr.contains("FOLDER")) {
                folderName = wrapperarr.substring(wrapperarr.indexOf("/"), wrapperarr.indexOf("'", wrapperarr.indexOf("/")));

            }
            else if (wrapperarr.contains("SCHEMANAME")) {
                schemaName = wrapperarr.split("=")[1].replace("'", "").replace("'", "'");
                if(schemaName == undefined || schemaName === null){
                    schemaName="";
                }
                else{
                    schemaName=schemaName.trim();
                }
            }
            else if (wrapperarr.contains("CREATE WRAPPER")) {
                tableName = wrapperarr.split(" ")[3];

            }
            else if (wrapperarr.contains("OUTPUTSCHEMA")) {

                break;

            }

        }
        createWrapperColumns(outputSchemaData, dataSourceName, folderName, schemaName, tableName,baseFileName,dbName);

    }
    catch (e) {


        message.append("Exception In getWrapperspecifications() \n" + e);
        message.append("\n ================================");
    }

    // return finalTableColumnMap;
}



function getWrapperspecificationsForMetadataCreation(sql,tablename) {

    try {
        System.out.println("Start In getWrapperspecificationsForMetadataCreation() "+sql+","+tablename);
        var wrapperFileContent = sql;
        if (wrapperFileContent.contains("OUTPUTSCHEMA")) {
            outputSchemaData = wrapperFileContent.substring(wrapperFileContent.indexOf("OUTPUTSCHEMA"), wrapperFileContent.lastIndexOf(")"));

        }

        createWrapperColumnsForMetaDataCreation(outputSchemaData, tablename);
        System.out.println("End In getWrapperspecificationsForMetadataCreation() ");

    }
    catch (e) {
        message.append("Exception In getWrapperspecificationsForMetadataCreation() \n" + e);
        message.append("\n ================================");
    }

    // return finalTableColumnMap;
}

function createWrapperColumnsForMetaDataCreation( wrapperColumnData,tablename) {
    try {
        System.out.println("Start IN createWrapperColumnsForMetaDataCreation "+wrapperColumnData+","+tablename);
        var keyColumnName = "";
        var valueColumnName = "";
        var ColumnNames = "";

        var columnDataType = "";
        var sourcetargetcolumnMap = new HashMap();
        var datasfolderMap = new HashMap();
        var columnAndFolderInfoMap = new HashMap();
        var tableAndColumnMap = new HashMap();
        var wrapperColumnDataArray = wrapperColumnData.split("\n");
        for (var wrcd = 0; wrcd < wrapperColumnDataArray.length; wrcd++) {
            var wrapperColumnDataArr = wrapperColumnDataArray[wrcd];
            if (wrapperColumnDataArr.contains(":")) {
                try{
                    var sourcetargetColumnnName = wrapperColumnDataArr.split(":")[0];
                    var sourcetargetColumnndataType = wrapperColumnDataArr.split(":")[1];
                    var sourcetargetColumnndataTypearray = sourcetargetColumnndataType.split(",");
                    for (var st=0;st<sourcetargetColumnndataTypearray.length; st++ ) {
                        sourcetargetColumnndataTypearr=sourcetargetColumnndataTypearray[st];
                        if (sourcetargetColumnndataTypearr.contains("sourcetypename")) {
                            columnDataType = sourcetargetColumnndataTypearr.split("=")[1].replace("'", "").replace("'", "");

                            if(columnDataType == undefined || columnDataType === null){
                                columnDataType="";
                            }
                            else{
                                columnDataType=columnDataType.trim();
                            }

                        }

                    }

                    //ColumnNames = sourcetargetColumnnName.split(":")[0];
                    keyColumnName = sourcetargetColumnnName.split("=")[0];
                    if(keyColumnName == undefined){
                        keyColumnName="";
                    }
                    else{
                        keyColumnName=keyColumnName.trim();
                    }

                    valueColumnName = sourcetargetColumnnName.split("=")[1];


                    if(valueColumnName == undefined){
                        valueColumnName="";
                    }
                    else{
                        valueColumnName=valueColumnName.trim().replace("'", "").replace("'", "");
                    }

                    sourcetargetcolumnMap.put(keyColumnName, valueColumnName + "##" + columnDataType);
                }

                catch(e){
                    continue;

                }
            }//if

            else if (wrapperColumnDataArr.contains("(OPT)")){
                try{
                    var scolumnDataType="";
                    var sourcetargetColumnnNames= wrapperColumnDataArr.split("(OPT)")[0];
                    var skeyColumnName = sourcetargetColumnnNames.split("=")[0];
                    if(skeyColumnName == undefined){
                        skeyColumnName="";
                    }
                    else{
                        skeyColumnName=skeyColumnName.trim();
                    }
                    var  svalueColumnName = sourcetargetColumnnNames.split("=")[1];
                    if(svalueColumnName == undefined){
                        svalueColumnName="";
                    }
                    else{
                        svalueColumnName=svalueColumnName.trim().replace("'", "").replace("'", "");
                    }
                    sourcetargetcolumnMap.put(skeyColumnName, svalueColumnName + "##" + scolumnDataType);
                }
                catch(e){
                    continue;

                }
            }
        }//
        metatDataForMeatadataCreation.put(tablename,sourcetargetcolumnMap);
        System.out.println("ENd createWrapperColumnsForMetaDataCreation");

    }
    catch (e) {


        message.append("Exception In  createWrapperColumnsForMetaDataCreation() \n" + e);
        message.append("\n ================================");
    }

    // return finalTableColumnMap;
}
function createWrapperColumns( wrapperColumnData,dataSourceName,folderName,schemaName,tableName,baseFileName,dbName) {

    try {

        var keyColumnName = "";
        var valueColumnName = "";
        var ColumnNames = "";

        var columnDataType = "";
        var sourcetargetcolumnMap = new HashMap();
        var datasfolderMap = new HashMap();
        var columnAndFolderInfoMap = new HashMap();
        var tableAndColumnMap = new HashMap();
        var wrapperColumnDataArray = wrapperColumnData.split("\n");
        for (var wrcd = 0; wrcd < wrapperColumnDataArray.length; wrcd++) {
            var wrapperColumnDataArr = wrapperColumnDataArray[wrcd];
            if (wrapperColumnDataArr.contains(":")) {
                try{
                    var sourcetargetColumnnName = wrapperColumnDataArr.split(":")[0];
                    var sourcetargetColumnndataType = wrapperColumnDataArr.split(":")[1];
                    var sourcetargetColumnndataTypearray = sourcetargetColumnndataType.split(",");
                    for (var st=0;st<sourcetargetColumnndataTypearray.length; st++ ) {
                        sourcetargetColumnndataTypearr=sourcetargetColumnndataTypearray[st];
                        if (sourcetargetColumnndataTypearr.contains("sourcetypename")) {
                            columnDataType = sourcetargetColumnndataTypearr.split("=")[1].replace("'", "").replace("'", "");

                            if(columnDataType == undefined || columnDataType === null){
                                columnDataType="";
                            }
                            else{
                                columnDataType=columnDataType.trim();
                            }

                        }

                    }

                    //ColumnNames = sourcetargetColumnnName.split(":")[0];
                    keyColumnName = sourcetargetColumnnName.split("=")[0];
                    if(keyColumnName == undefined){
                        keyColumnName="";
                    }
                    else{
                        keyColumnName=keyColumnName.trim();
                    }


                    valueColumnName = sourcetargetColumnnName.split("=")[1];


                    if(valueColumnName == undefined){
                        valueColumnName="";
                    }
                    else{
                        valueColumnName=valueColumnName.trim().replace("'", "").replace("'", "");
                    }

                    sourcetargetcolumnMap.put(keyColumnName, valueColumnName + "##" + columnDataType);
                }

                catch(e){
                    continue;

                }
            }//if

            else if (wrapperColumnDataArr.contains("(OPT)")){
                try{
                    var scolumnDataType="";
                    var sourcetargetColumnnNames= wrapperColumnDataArr.split("(OPT)")[0];
                    var skeyColumnName = sourcetargetColumnnNames.split("=")[0];
                    if(skeyColumnName == undefined){
                        skeyColumnName="";
                    }
                    else{
                        skeyColumnName=skeyColumnName.trim();
                    }
                    var  svalueColumnName = sourcetargetColumnnNames.split("=")[1];
                    if(svalueColumnName == undefined){
                        svalueColumnName="";
                    }
                    else{
                        svalueColumnName=svalueColumnName.trim().replace("'", "").replace("'", "");
                    }
                    sourcetargetcolumnMap.put(skeyColumnName, svalueColumnName + "##" + scolumnDataType);
                }
                catch(e){
                    continue;

                }
            }
        }//for
        datasfolderMap.put("datasourcefolderschemaName", dataSourceName + "##" + schemaName + "##" + folderName + "##" + baseFileName + "##" + dbName);
        columnAndFolderInfoMap.put(datasfolderMap, sourcetargetcolumnMap);
        tableAndColumnMap.put(tableName, columnAndFolderInfoMap);
        // finalTableColumnMap.put(dbName, tableAndColumnMap);
        if (finalTableColumnMap.get(dbName) === null) {
            finalTableColumnMap.put(dbName, tableAndColumnMap);

        }

        else if (finalTableColumnMap.get(dbName) !== null) {
            var  oldValueMap = finalTableColumnMap.get(dbName);

            oldValueMap.putAll(tableAndColumnMap);

            finalTableColumnMap.get(dbName).putAll(oldValueMap);

        }
    }
    catch (e) {


        message.append("Exception In  createWrapperColumns() \n" + e);
        message.append("\n ================================");
    }

    // return finalTableColumnMap;
}
//  wrapper completed

// for table specifications
function gettableSpecifications(filePath) {
    var tableName = "";
    var wrapperName = "";
    var tableWrapperMap = new HashMap();

    try {
        var wrapperFile = new File(filePath);
        var baseFileName = wrapperFile.getName().replace(".sql", "");
        var dbName = baseFileName.split("Table")[1];
        var tableFileContent = FileUtils.readFileToString(wrapperFile);
        var tableArray = tableFileContent.split("\n");
        for (var ta=0; ta<tableArray.length;ta++) {
            tableQueryArray= tableArray[ta];
            if (tableQueryArray.contains("CREATE TABLE")) {

                tableName = tableQueryArray.split(" ")[2];
            }
            else if (tableQueryArray.contains("WRAPPER")) {
                wrapperName = tableQueryArray.replace("(", "").replace(")", "").split("WRAPPER")[1].trim().split(" ")[1];
                if(wrapperName == undefined){
                    wrapperName="";
                }
                else{
                    wrapperName=wrapperName.trim();
                }


            }

        }
        tableWrapperMap.put(tableName, wrapperName);
        //finalTableWrapperMap.put(dbName, tableWrapperMap);
        if (finalTableWrapperMap.get(dbName) === null) {
            finalTableWrapperMap.put(dbName, tableWrapperMap);
        }
        else if (finalTableWrapperMap.get(dbName) !== null) {
            oldValueMap = finalTableWrapperMap.get(dbName);

            oldValueMap.putAll(tableWrapperMap);

            finalTableWrapperMap.get(dbName).putAll(oldValueMap);

        }


    }
    catch (e) {
        message.append("Exception In gettableSpecifications() \n" + e);
        message.append("\n ================================");
    }
    //return finalTableWrapperMap;
}

function associationMappings( map,  filepath,  domainUrl,  userName,
                               Password,  srcSystemName,  srcEnvironmentName,  tgtSystemName,
                               tgtEnvironmentName,  mappingManagerUtil,  projectId,  systemEnvMap,  systemManagereUtil,  keyValueUtil,  mapVersionCheck,vParentSubjectId) {
    var mappingName = "";
    var associationPrimaryTableName = "";
    var associationForigenTableName = "";
    var tableCol1 = "";
    var tableCol2 = "";
    var mappingConditionSet = new LinkedHashSet();
    var columnsSet = null;
    var mapspec = new MappingSpecificationRow();
    var tableName = "";

    var json = "";

    try {

        var associationFile = new File(filepath);
        var baseFileName = associationFile.getName().replace(".sql", "");
        var dbName = baseFileName.split("Association")[1];
        var associationFileContent = FileUtils.readFileToString(associationFile);
        var associationArray = associationFileContent.split("\n");

        for (var associationar in associationArray) {
            var associationarr=associationArray[associationar];
            //             return associationArray[associationarr];
            if (associationarr === "") {
                continue;
            }
            else if (associationarr.contains("CREATE ASSOCIATION")) {
                mappingName = associationarr.trim().split(" ")[2];
            }
            else if (associationarr.contains("ENDPOINT") && associationarr.contains("PRINCIPAL")) {
                associationPrimaryTableName = associationarr.trim().split(" ")[2];

                var associationPrimaryTableAndDatabase = associationPrimaryTableName.split(".");
                //                 return associationPrimaryTableName+"--"+associationPrimaryTableAndDatabase;

                if (associationPrimaryTableAndDatabase.length > 1) {
                    associationPrimaryTableName = associationPrimaryTableAndDatabase[1];

                }

                if (columnsAgainstPrimaryTable.get(associationPrimaryTableName) === null) {
                    //                        var databaseNames[] = map.get("dataBaseName").split("##");
                    //                        for (var m = 0; m < databaseNames.length; m++) {
                    if (associationPrimaryTableAndDatabase.length > 1) {
                        dataBaseName = associationPrimaryTableAndDatabase[0];
                    }
                    else {
                        dataBaseName = dbName;

                    }
                    var startTime=System.currentTimeMillis();
                    var base64Encode = Base64.getEncoder();
                    var url = domainUrl + "/denodo-restfulws/" + dataBaseName + "/views/" + associationPrimaryTableName + "/$schema";

                    var basicAuthToken = userName + ":" + Password;

                    var baseauthToken = base64Encode.encodeToString(basicAuthToken.getBytes());
                    var client = HttpClients.createDefault();
                    var httpGet = new HttpGet(url);
                    httpGet.setHeader("Authorization", "Basic " + baseauthToken);
                    httpGet.setHeader("Content-type", "application/json");
                    httpGet.setHeader("Accept", "application/json");

                    var reportResponse = client.execute(httpGet);
                    var entity1=reportResponse.getEntity();
                    var status = EntityUtils.toString(entity1);
                    //                                             return status;

                    //                     var statusCode = reportResponse.getStatusLine().getStatusCode();
                    if (status === "") {
                        //                throw new RuntimeException("Failed with HTTP error code : " + statusCode);
                        message.append("Failed with HTTP error code : " + status + "\n");
                    }
                    else {
                        //                         var reportsEntity = reportResponse.getEntity();
                        //                         json = EntityUtils.toString(reportsEntity);
                        //                         return json;
                        var colJsonobj = new JSONObject(status);
                        if(colJsonobj.length() > 0){
                            tableName = colJsonobj.getString("name");
                            var colJsonObject = colJsonobj.getJSONObject("properties");
                            var keysItr = colJsonObject.keys();
                            columnsSet = new HashSet();
                            while (keysItr.hasNext()) {
                                var key = keysItr.next();
                                var colDataTypeObject = colJsonObject.getJSONObject(key);
                                var coldataType = colDataTypeObject.getString("type");
                                columnsSet.add(key);

                            }
                            columnsAgainstPrimaryTable.put(associationPrimaryTableName, columnsSet);
                        }
                    }
                    //                     return columnsAgainstPrimaryTable;
                    var endTime=System.currentTimeMillis();
                    message.append("\nRestService consume time in milisecond="+(endTime-startTime)+"\n");
                    //                        }
                }
                else {

                    columnsSet = columnsAgainstPrimaryTable.get(associationPrimaryTableName);
                }

            }
            else if (associationarr.contains("ENDPOINT")) {
                associationForigenTableName = associationarr.trim().split(" ")[2];

            }
            else if (associationarr.contains("ADD MAPPING")) {
                var mapCondition = associationarr.trim().split(" ")[2];
                mappingConditionSet.add(mapCondition);
                tableCol1 = mapCondition.split("=")[0];
                tableCol2 = mapCondition.split("=")[1];

            }

        }
        if (columnsSet !== null) {
            generateSourceTargetInfo(associationPrimaryTableName, associationForigenTableName, mappingConditionSet, columnsSet, srcSystemName, srcEnvironmentName, tgtSystemName,
                                     tgtEnvironmentName, mappingName, mappingManagerUtil, projectId, associationFileContent, filepath, dbName, systemEnvMap, systemManagereUtil, keyValueUtil, mapVersionCheck,vParentSubjectId);
        }

    }
    catch ( e) {

        message.append("Exception In associationMappings() \n" + e);
        message.append("\n ================================");
    }

    return "";
}


function getColumnNamefromColumnList(columnlist){
    var columnMap = new LinkedHashMap();
    for(var i=0;i<columnlist.size();
        i++){
        var columnObj = columnlist.get(i);
        var columnName = columnObj.getColumnName();
        colListForStar.add(columnName);
        var columnlengt = columnObj.getColumnLength();
        var columnprecision = columnObj.getColumnPrecision();
        var columnScale = columnObj.getColumnScale();
        var columndatatype = columnObj.getColumnDatatype();

        var columncomments=columnObj.getColumnComments();//string
        var columndefine=columnObj.getColumnDefinition();//string
        var columnClass=columnObj.getColumnClass();//string
        var logicalname=columnObj.getLogicalColumnName();//string
        var sdidesp=columnObj.getSDIDescription();//string
        var xpath=columnObj.getXPath();//string
        var sdiflag=columnObj.isSDIFlag();//boolean
        var businessflag=columnObj.isBusinessKeyFlag();//boolean
        var foreignflag=columnObj.isForeignKeyFlag();//boolean
        var primaryflag=columnObj.isPrimaryKeyFlag();//boolean

        var nullableflag=columnObj.isColumnNullableFlag();//boolean
        var naturalflag=columnObj.isNaturalKeyFlag();//boolean
        var identityFlag=columnObj.isColumnIdentityFlag();//boolean


        if(columnlengt===null || columnlengt==="" ||columnlengt==="null"){
            columnlengt="0";
        }

        if(columnprecision===null || columnprecision==="" ||columnprecision==="null"){
            columnprecision="0";
        }

        if(columnScale===null || columnScale==="" ||columnScale==="null"){
            columnScale="0";
        }
        if(columndatatype===null || columndatatype===""){
            columndatatype="erwin";
        }

        if(columncomments===null || columncomments===""){
            columncomments="erwin";
        }

        if(columndefine===null || columndefine===""){
            columndefine="erwin";
        }
        if(columnClass===null || columnClass===""){
            columnClass="erwin";
        }

        if(logicalname===null || logicalname===""){
            logicalname="erwin";
        }
        if(xpath===null || xpath===""){
            xpath="erwin";
        }

        if(sdidesp===null || sdidesp===""){
            sdidesp="erwin";
        }

        columnMap.put(columnName,columnName+"##@##"+columnlengt+"##@##"+columnprecision+"##@##"+columnScale+"##@##"+columndatatype+"##@##"+columncomments+"##@##"+columndefine+"##@##"+columnClass+"##@##"+logicalname+"##@##"+xpath+"##@##"+sdidesp+"##@##"+sdiflag+"##@##"+businessflag+"##@##"+foreignflag+"##@##"+primaryflag+"##@##"+nullableflag+"##@##"+naturalflag+"##@##"+identityFlag);

    }
    return columnMap;
}





function getAllEnvironmentsBasedonTheCatOptions(Sorcesystem_src,srcEnv_src){
    try{
        var metadataInfo=new LinkedHashSet();
        var  environmentobjectDetails = new HashMap();

        // newly added for metadata syncup
        getMetadataInfo (Sorcesystem_src,srcEnv_src,metadataInfo);



        var iterator=metadataInfo.iterator();
        while(iterator.hasNext()){
            var value=iterator.next();
            var system=value.split("##")[0];
            var environment=value.split("##")[1];
            try{
                var envId=systemManagereUtil.getEnvironmentId(system,environment);


                var tablesEnvlist =systemManagereUtil.getEnvironmentTables(envId);
                var tabList = new ArrayList();



                for(var i=0;i<tablesEnvlist.size();
                    i++){
                    var tableObject=tablesEnvlist.get(i);
                    var tableName = tablesEnvlist.get(i).getTableName();
                    var envsys = environment + "#" + system;
                    envMap.put(tableName, envsys);
                    getColumnInfo(tableObject);
                }
            }
            catch(e){

                //gcStatus = gcStatus + "\n " + "Invalid SystemName and Environment i.e"+system+","+ environment + "\n";
            }


            // return envMap;

        }

        var systemId = systemManagereUtil.getSystemId(Sorcesystem_src);


        if(systemId!==0){
            allEnvironments = systemManagereUtil.getEnvironments(systemId);

            for (var j = 0; j < allEnvironments.size();
                 j++) {
                smEnvironment = allEnvironments.get(j);
                var dataBaseUrl = smEnvironment.getDatabaseURL();
                var dataBaseUserName = smEnvironment.getDatabaseUserName();

                environmentobjectDetails.put(smEnvironment.getSystemEnvironmentName(), dataBaseUrl + "##" + dataBaseUserName);

                //return environmentobjectDetails;

                if (SystemenvironmentDetails.get(Sorcesystem_src) === null) {
                    SystemenvironmentDetails.put(Sorcesystem_src, environmentobjectDetails);
                }
                else if (SystemenvironmentDetails.get(Sorcesystem_src) !== null) {
                    oldValueMap = SystemenvironmentDetails.get(Sorcesystem_src);

                    oldValueMap.putAll(environmentobjectDetails);

                    SystemenvironmentDetails.get(Sorcesystem_src).putAll(oldValueMap);

                }
            }

        }

    }
    catch(e){
    }

    // return iterator;

}

function getMetadataInfo (systenName,environmentName,metadataInfo){

    if(systenName!==null||!"".equals(systenName)){
        if(environmentName!==null||!"".equals(environmentName)){
            var envList = environmentName.split("\n");
            //return sourceEnvname+"   "+envList;
            for(var j=0;j<envList.length;j++){
                metadataInfo.add(systenName+"##"+envList[j].trim());
            }
        }
        else{
            try{
                var systemId=systemManagereUtil.getSystemId(systenName);
                var environmentslist=systemManagereUtil.getEnvironments(systemId);
                for(var k=0;k<environmentslist.size();
                    k++){
                    metadataInfo.add(systenName+"##"+environmentslist.get(k).getSystemEnvironmentName());
                }

            }
            catch(e){
                gcStatus = gcStatus + "\n " + "Invalid SystemName  i.e"+system+""+"\n";
            }

        }

    }


}





function getColumnInfo(tableobj){
    var tableName = tableobj.getTableName();
    var tableId = tableobj.getTableId();
    var tablecolumns = systemManagereUtil.getTableColumns(tableId);
    var columnsInfo=getColumnNamefromColumnList(tablecolumns);
    columnsInfoMap.put(tableName,columnsInfo);
    tableColMapForStar.put(tableName,colListForStar);
    colListForStar= new ArrayList();

    return columnsInfoMap;
}




function generateSourceTargetInfo( assoPrimaryTable,  assoForeignTable,
                                    mappConditionSet,  colSet,  srcSystemName,  srcEnvironmentName,  tgtSystemName,
                                    tgtEnvironmentName,  mappingName,  mappingManagerUtil,
                                    projectId,  associationFileContent,  filepath,  dbName,  systemEnvMap,  systemManagereUtil,  keyValueUtil,  mapVersionCheck,vParentSubjectId) {
    var sourceTargetMappingsSet = new LinkedHashSet();

    try {

        var iterator=mappConditionSet.iterator();

        while(iterator.hasNext()){

            //         }
            //         for (var eachCondition1 in mappConditionSet) {
            var eachCondition=iterator.next();
            var tableCol1 = eachCondition.split("=")[0];
            var tableCol2 = eachCondition.split("=")[1];

            if (colSet.contains(tableCol1)) {
                sourceTargetMappingsSet.add(assoPrimaryTable + "#ERWIN@" + tableCol1 + "#ERWIN@" + assoForeignTable + "#ERWIN@" + tableCol2);
            }
            else {
                sourceTargetMappingsSet.add(assoPrimaryTable + "#ERWIN@" + tableCol2 + "#ERWIN@" + assoForeignTable + "#ERWIN@" + tableCol1);
            }
        }
        //         return mappConditionSet+"\n"+sourceTargetMappingsSet;

        genearateMappings(sourceTargetMappingsSet, srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, mappingManagerUtil, projectId, mappingName, associationFileContent, filepath, dbName, systemEnvMap, systemManagereUtil, assoPrimaryTable, assoForeignTable, keyValueUtil, mapVersionCheck,vParentSubjectId);

    }
    catch ( e) {

        message.append("Exception In generateSourceTargetInfo() \n" + e);
        message.append("\n ================================");
    }
}

function genearateMappings( sourceTargetMappingsSet,  srcSystemName,  srcEnvironmentName,  tgtSystemName,
                             tgtEnvironmentName,  mappingManagerUtil,  projectId,
                             mappingName,  associationFileContent,  filepath,  dbName,
                             systemEnvMap,  systemManagereUtil,  assoPrimaryTable,  assoForeignTable,  keyValueUtil,  mapVersionCheck,vParentSubjectId) {
    try {
        mappingName = mappingName.replace("\"", "");
        for ( var s = 0; s < listSubjectNames.length; s++) {
            if (s === 0) {
                parentNamee = dbName;
                if(vParentSubjectId === -1 || vParentSubjectId === 0){
                    parentSubectId = createParentSubject(projectName, projectId, mappingManagerUtil, parentNamee);
                }
                else{
                    mappingManagerUtil.createSubject(projectId, vParentSubjectId, parentNamee);
                    parentSubectId = mappingManagerUtil.getSubjectId(vParentSubjectId, Node.NodeType.MM_SUBJECT, parentNamee);
                }
                parentNamee = listSubjectNames[s].split("Association")[0];
                if (!parentNamee.equalsIgnoreCase(mappingName.replace("\"", ""))) {

                    mappingManagerUtil.createSubject(projectId, parentSubectId, parentNamee);
                    parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, parentNamee);

                }
                //                    parentSubectId = createParentSubject(projectName, projectId, mappingManagerUtil, parentNamee);
                if (listSubjectNames.length == 1) {
                    createMappings(sourceTargetMappingsSet, srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, mappingManagerUtil, projectId, mappingName, associationFileContent, systemEnvMap, systemManagereUtil, dbName, assoPrimaryTable, assoForeignTable, keyValueUtil, mapVersionCheck);
                    //                        message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
                    //                         mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                    //                             mapIdO = mappingManagerUtil.getMappingId(projectName, mapObj.getMappingName());
                }
            }
            else if (listSubjectNames[s] == listSubjectNames[listSubjectNames.length - 1]) {
                SubparentName = listSubjectNames[s];

                mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

                createMappings(sourceTargetMappingsSet, srcSystemName, srcEnvironmentName, tgtSystemName, tgtEnvironmentName, mappingManagerUtil, projectId, mappingName, associationFileContent, systemEnvMap, systemManagereUtil, dbName, assoPrimaryTable, assoForeignTable, keyValueUtil, mapVersionCheck);

                //                     mapId = mappingManagerUtil.getMappingId(parentSubectId, mapObj.getMappingName(), Node.NodeType.MM_SUBJECT);
                //                    if (mapId > 0) {
                //                        mappingManagerUtil.deleteMapping(mapId);
                //                    }
                //                    message.append(mappingManagerUtil.createMapping(mapObj).getStatusMessage() + "\n");
            }
            else {
                SubparentName = listSubjectNames[s];

                mappingManagerUtil.createSubject(projectId, parentSubectId, SubparentName);
                parentSubectId = mappingManagerUtil.getSubjectId(parentSubectId, Node.NodeType.MM_SUBJECT, SubparentName);

            }

        }

    }
    catch ( e) {

        message.append("Exception In genearateMappings() \n" +e);
        message.append("\n ================================");
    }
}

function createMappings( sourceTargetMappingsSet,  srcSystemName,  srcEnvironmentName,  tgtSystemName,
                          tgtEnvironmentName,  mappingManagerUtil,
                          projectId,  mappingName,  associationFileContent, systemEnvMap,
                          systemManagereUtil,  dbName,  sourceTable,  targetTable,  keyValueUtil,  mapVersionCheck) {
    try {
        var mapspec = new MappingSpecificationRow();
        var map = new Mapping();
        var mapspecList = new ArrayList();
        var srcTableName = "";
        var srcColumnName = "";
        var tgtTableName = "";
        var tgtColumnName = "";
        var forSourceCheck = false;
        var forTargetCheck = false;



        var tempIte=sourceTargetMappingsSet.iterator();
        while(tempIte.hasNext()){
            var eachSourceTargetMappingsSet=tempIte.next();
            //         for (var eachSourceTargetMappingsSet1 in sourceTargetMappingsSet) {
            //             var eachSourceTargetMappingsSet=sourceTargetMappingsSet[eachSourceTargetMappingsSet1];
            //#ERWIN@
            srcTableName = eachSourceTargetMappingsSet.split("#ERWIN@")[0];
            srcColumnName = eachSourceTargetMappingsSet.split("#ERWIN@")[1];
            tgtTableName = eachSourceTargetMappingsSet.split("#ERWIN@")[2];
            tgtColumnName = eachSourceTargetMappingsSet.split("#ERWIN@")[3];

            mapspec.setSourceSystemName(srcSystemName);
            mapspec.setSourceSystemEnvironmentName(srcEnvironmentName);
            mapspec.setSourceTableName(srcTableName);
            mapspec.setSourceColumnName(srcColumnName);
            mapspec.setTargetSystemName(tgtSystemName);
            mapspec.setTargetSystemEnvironmentName(tgtEnvironmentName);
            mapspec.setTargetTableName(tgtTableName);
            mapspec.setTargetColumnName(tgtColumnName);
            //mapspec.setBusinessRule(businessRuleInfo);                   
            mapspecList.add(mapspec);
            mapspec = new MappingSpecificationRow();
        }

        if(mappingName.length()>250){
            mappingName=mappingName.replaceAll("\\.","_").substring(0,250);
        }
        else {
            mappingName=mappingName.replaceAll("\\.","_");
        }

        map.setProjectId(projectId);
        map.setSubjectId(parentSubectId);
        map.setSourceExtractQuery(associationFileContent);
        map.setMappingName(mappingName);
        map.setMappingSpecifications(mapspecList);

        var tempMappingObject=map;

        var intermediateCompSysEnv = mappingName;
        var mapIdO = mappingManagerUtil.getMappingId(parentSubectId, mappingName, Node.NodeType.MM_SUBJECT);

        // we need to call sync up code
        map = metadataSync(envMap,map,systemManagereUtil,projectId,parentSubectId,mappingName,columnsInfoMap,srcSystemName,srcEnvironmentName,tgtSystemName,tgtEnvironmentName);

        if(map === null){

            map=tempMappingObject;
        }
        if (mapIdO > 0) {
            if (mapVersionCheck.equals("true")) {
                creatingMapVersion(projectId, mappingName, parentSubectId, associationFileContent, mapspecList, keyValueUtil, mappingManagerUtil);
                //               l.addMappingSpecifications(latestMapId, mapspecList).getStatusMessage() + "\n");
                mapspecList = new ArrayList();
            }
            else {
                var mappingNameD = map.getMappingName();
                latestMappingVersion = getMappingVersions(parentSubectId, mappingNameD, mappingManagerUtil);
                if (latestMappingVersion.size() === 1) {
                    mappingManagerUtil.deleteMapping(mapIdO);
                    message.append(mappingManagerUtil.createMapping(map).getStatusMessage() + "\n");
                }
                else {
                    updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
                    mappingManagerUtil.deleteMapping(mapIdO, APIConstants.VersionMode.SPECIFIC_VERSION, updateMappingVersion);
                    creatingMapVersion(projectId, mappingName, parentSubectId, associationFileContent, mapspecList, keyValueUtil, mappingManagerUtil);
                    //                        message.append(mappingManagerUtil.createMapping(map).getStatusMessage() + "\n");
                }
                mapspecList = new ArrayList();
                map = new Mapping();
            }
            //latestMappingObj = new Mapping();

        }
        else {
            message.append(mappingManagerUtil.createMapping(map).getStatusMessage() + "\n");
            mapspecList = new ArrayList();
            map = new Mapping();
        }

    }
    catch ( e) {


        message.append("Exception In createMappings() \n" + e+"883");
        message.append("\n ================================");
    }
}

function getMappingVersions( subjectId,  mapName,  mappingManagerUtil) {
    var mapVersionList = new ArrayList();
    try {
        var mappings = mappingManagerUtil.getMappings(subjectId, Node.NodeType.MM_SUBJECT);

        if (!mappings.isEmpty()) {
            for (var map = 0; map < mappings.size();
                 map++) {
                var mappingName = mappings.get(map).getMappingName();
                var mappingVersion = mappings.get(map).getMappingSpecVersion();
                if (mapName.equalsIgnoreCase(mappingName)) {
                    mapVersionList.add(mappingVersion);
                }
            }
        }
    }
    catch ( e) {
        if ("Invalid ProjectId".equalsIgnoreCase(e.getMessage())) {
        }

        message.append("Exception In getMappingVersions() \n" + e);
        message.append("\n ================================");
    }
    return mapVersionList;
}

function creatingMapVersion( projectId,  mappingName,  parentSubectId,  extractQuery, mapspecList,  keyValueUtil,  mappingManagerUtil) {
    var latestMappingObj = null;

    try {
        latestMappingVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
        updateMappingVersion = latestMappingVersion.get(latestMappingVersion.size() - 1);
        var mappingObj = mappingManagerUtil.getMapping(parentSubectId, Node.NodeType.MM_SUBJECT, mappingName, updateMappingVersion);
        var mappId = mappingObj.getMappingId();
        mappingObj.setProjectId(projectId);
        mappingObj.setSubjectId(parentSubectId);
        mappingObj.setMappingId(mappId);
        mappingObj.setChangedDescription("Mapping " + mappingName + " changed! as Version Done: " + updateMappingVersion);
        mappingObj.setSourceExtractQuery(extractQuery);
        var status = mappingManagerUtil.versionMapping(mappingObj).getStatusMessage();
        message.append(status + "\n");
        latestMapVersion = getMappingVersions(parentSubectId, mappingName, mappingManagerUtil);
        latestMapV = latestMapVersion.get(latestMapVersion.size() - 1);
        latestMappingObj = mappingManagerUtil.getMapping(parentSubectId, Node.NodeType.MM_SUBJECT, mappingName, latestMapV);
        var latestMapId = latestMappingObj.getMappingId();
        mappingManagerUtil.deleteMappingSpecifications(latestMapId);
        keyValueUtil.deleteKeyValues("8", latestMapId + "");
        message.append(mappingManagerUtil.addMappingSpecifications(latestMapId, mapspecList).getStatusMessage() + "\n");
    }
    catch ( e) {

        message.append("Exception In creatingMapVersion() \n" +e);
        message.append("\n ================================");
    }
    return latestMappingObj;
}

function  forDeleteVqlFiles( sqlfile) {
    try {
        var deleteFiles = sqlfile.listFiles();
        for (var v1 = 0; v1 < deleteFiles.length; v1++) {
            var deletevqlpath = deleteFiles[v1].getAbsolutePath();
            if (!new File(deletevqlpath).isDirectory()) {
                FileUtils.deleteQuietly(new File(deletevqlpath));
            }
        }
    }
    catch ( e) {


        message.append("Exception In forDeleteVqlFiles() \n" + e);
        message.append("\n ================================");
    }
    finally {
        System.gc();
    }
}

function forDeleteVqlFilesDir( vqlOutpuTQueries) {
    try {

        FileUtils.deleteDirectory(new File(vqlOutpuTQueries));

    }
    catch ( e) {

        message.append("Exception In forDeleteVqlFilesDir() \n" +e);
        message.append("\n ================================");
    }
    finally {
        System.gc();
    }
}

function createParentSubject( projectName,  projectId,  mappingManagerUtil,  parentName) {
    var parentSubId = 0;
    try {
        parentSubId = mappingManagerUtil.getSubjectId(projectName, parentName);
        if (parentSubId === 0 || parentSubId === -1) {
            var sub = new Subject();
            sub.setSubjectName(parentName);
            sub.setProjectId(projectId);
            mappingManagerUtil.createSubject(sub);
            parentSubId = mappingManagerUtil.getSubjectId(projectName, parentName);
        }
        else {
            parentSubId = mappingManagerUtil.getSubjectId(projectName, parentName);
        }
    }
    catch ( e) {

        message.append("Exception In createParentSubject() \n" + e);
        message.append("\n ================================");
    }
    return parentSubId;
}

function extractVqlfiles( sqlfiles) {
    try {
        var sqlfileContent = "";
        var sqlfilearr = sqlfiles.listFiles();
        for (var k=0; k<sqlfilearr.length; k++) {
            var extension = FilenameUtils.getExtension(sqlfilearr[k].getName());
            if (extension.equalsIgnoreCase("log")) {
                sqlfileContent = LogfileParser.doparselogfilenio(Paths.get(sqlfilearr[k].getAbsolutePath()));
            }
            else {
                sqlfileContent = FileUtils.readFileToString(sqlfilearr[k]).trim();
            }
            if (extension.equalsIgnoreCase("dtsx")) {
                sqlfileContent = Ssisqueryextractor.getquery(sqlfilearr[k].getAbsolutePath());

            }
            sqlfileContent = sqlfileContent.replaceAll("\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$", "");

            //REPLACE FOLDER
            if (sqlfileContent.trim().split(";").length >= 1) {
                var multiplesqlfiles = sqlfileContent.split(";");
                var i = 0;
                for (var j = 0; j < multiplesqlfiles.length; j++) {
                    var multiplesqlfile = multiplesqlfiles[j].trim();

                    multiplesqlfile = removeVarying(multiplesqlfile);
                    var sqlfile = new File(sqlfilearr[k].getAbsolutePath().replace(extension, "") + "" + i + ".sql");
                    FileUtils.writeStringToFile(sqlfile, multiplesqlfile);
                    i++;
                    sqlfilearr[k].delete();

                }
            }
        }

    }
    catch ( e) {
        message.append("Exception In extractVqlfiles() \n" + e);
        message.append("\n ================================");
    }

}

function removeVarying(procedureFile) {

    try {
        if ((procedureFile.contains("varying"))) {
            procedureFile = procedureFile.replaceAll("varying\\(.*?\\)", "");
            procedureFile = procedureFile.replaceAll("varying", "");
        }

    }
    catch ( e) {
        message.append("Exception In removeVarying() \n" + e);
        message.append("\n ================================");
    }
    return procedureFile;
}
//overview
//For OverView Code

var deletemapflag=false;
var deleteMapActaulTgtTableName="";
var targetTableName="";
var isAcualTargetTbl=false;
var isActualSrcTbl=false;
var businessRuleMap=new HashMap();
var businessRuleButNoSource= new HashMap();
var finalbusinessRuleMap = new HashMap();

function clearVariables(){
    deletemapflag=false;
    deleteMapActaulTgtTableName="";
    targetTableName="";
    isAcualTargetTbl=false;
    businessRuleMap.clear();
    businessRuleButNoSource.clear();
    finalbusinessRuleMap.clear();
}


function getSourceTargetMap(speclist){
    //     return "HI";
    var sourceTareget=new HashMap();
    var sourceTableName = "";
    var sourceColumnName = "";
    var targetColumnName = "";
    var source = "";
    var target = "";
    var businessRule = "";
    try{
        //get Iterator Object
        var iterator1=speclist.iterator();
        //iterator through mapspeclist
        while(iterator1.hasNext()){
            //get element from Arraylist
            var specRow=iterator1.next();
            var targetTableNameForThisLoop = specRow.getTargetTableName();
            if (targetTableNameForThisLoop.toUpperCase().contains("DELETE")) {
                deletemapflag=true;
            }
            if (!targetTableNameForThisLoop.contains("_SELECT") && !targetTableNameForThisLoop.contains("-SELECT") && !targetTableNameForThisLoop.contains("RESULT_OF") && !targetTableNameForThisLoop.contains("UPDATE-SET") && !targetTableNameForThisLoop.contains("MERGE-UPDATE") && !targetTableNameForThisLoop.contains("-SELECT") && !targetTableNameForThisLoop.contains("RESULT_OF") && !targetTableNameForThisLoop.contains("MERGE-UPDATE") && !targetTableNameForThisLoop.trim().equals("")) {
                deleteMapActaulTgtTableName=targetTableNameForThisLoop;
            }
        }//while

        //get Iterator Object
        var iterator2=speclist.iterator();
        while(iterator2.hasNext()){
            //get element from Arraylist
            var mapSpecRow = iterator2.next();
            //get source
            sourceTableName = ((mapSpecRow.getSourceTableName() === null) ? "" : mapSpecRow.getSourceTableName());
            sourceColumnName = ((mapSpecRow.getSourceColumnName() === null) ? "" : mapSpecRow.getSourceColumnName());
            source = sourceTableName + "_AMM_" + sourceColumnName;
            //source = source.toUpperCase();
            targetTableName = ((mapSpecRow.getTargetTableName() === null) ? "" : mapSpecRow.getTargetTableName());
            //targetTableName = targetTableName.toUpperCase();
            if (targetTableName.contains("\n")) {
                targetTableName = targetTableName.split("\n")[targetTableName.split("\n").length - 1];
            }
            if (!targetTableName.toUpperCase().contains("_SELECT") && !targetTableName.toUpperCase().contains("-SELECT") && !targetTableName.toUpperCase().contains("RESULT_OF") && !targetTableName.toUpperCase().contains("UPDATE-SET") && !targetTableName.toUpperCase().contains("MERGE-UPDATE") && !targetTableName.trim().equals("")) {
                isAcualTargetTbl = true;
            }

            if (!sourceTableName.contains("RESULT_OF") && !sourceTableName.contains("_SELECT") && !sourceTableName.contains("-SELECT") && !sourceTableName.contains("UPDATE-SET") && !sourceTableName.contains("MERGE-UPDATE")) {
                isActualSrcTbl = true;
            }
            targetColumnName = ((mapSpecRow.getTargetColumnName() === null) ? "" : mapSpecRow.getTargetColumnName());
            target = targetTableName + "_AMM_" + targetColumnName;
            //target = target.toUpperCase();
            businessRule = ((mapSpecRow.getBusinessRule() === null) ? "" : mapSpecRow.getBusinessRule());
            if (!businessRule.trim().equals("")) {
                businessRuleMap.put(target, businessRule);
            }
            if (!businessRule.trim().equals("")) {
                businessRuleButNoSource.put(businessRule + "_AMM_" +targetTableName, targetColumnName);
            }
            if (!target.trim().equals("_AMM_")) {
                if (sourceTareget.get(target) !== null) {
                    if (sourceTareget.get(target).contains(source) && !sourceTareget.get(target).equals(sourceTableName + "-1_AMM_" + sourceColumnName)) {
                        continue;
                    }
                    source = sourceTareget.get(target) + "~~" + source;
                }
                sourceTareget.put(target, source);
            }
        }
    }
    catch(e){
        throw e+" getSourceTargetMap() "+"\n";
    }
    return sourceTareget;
}

//getTarget function
function getTarget(specrowlist) {
    var onlySourceTarget = new HashMap();
    try {
        var sourceTarget = getSourceTargetMap(specrowlist);
        var i = 0;
        //get set Object contains Entries In Map
        var entrySet=sourceTarget.entrySet();
        //get Iterator Object
        var iterator=entrySet.iterator();
        while(iterator.hasNext()){
            var entry=iterator.next();
            var key = (entry.getKey() === null) ? "" : entry.getKey();
            var pointer = key;
            var attemp = new ArrayList();
            while (sourceTarget.get(pointer) !== null && !attemp.contains(pointer)) {
                attemp.add(pointer);
                pointer = sourceTarget.get(pointer);
                if (pointer.contains("~~")) {
                    var makeInnerPointer = "";
                    // final String[] pointerArr = pointer.split("~~");
                    var pointerArr = pointer.split("~~");
                    for (var j = 0; j < pointerArr.length; ++j) {
                        var innerPointer;
                        for (innerPointer = pointerArr[j]; sourceTarget.get(innerPointer) !== null;
                             innerPointer = ((sourceTarget.get(innerPointer) === null) ? "" : sourceTarget.get(innerPointer))) {
                        }
                        if ((!innerPointer.contains("_SELECT") && !innerPointer.contains("-SELECT") && !innerPointer.contains("RESULT_OF") && !innerPointer.contains("UPDATE-SET") && !innerPointer.contains("MERGE-UPDATE")) || !this.isAcualTargetTbl) {
                            makeInnerPointer = makeInnerPointer + innerPointer + "~~";
                        }
                    }
                    pointer = makeInnerPointer;
                }
                if (businessRuleMap.get(pointer) !== null) {
                    finalbusinessRuleMap.put(key, businessRuleMap.get(pointer));
                }
            }
            if (pointer.trim().equals("_AMM_") || pointer.contains("_AMM_~~")) {
                pointer = "RESULT_OF_AMM_" + i;
                ++i;
            }
            if ((!key.contains("_SELECT") && !key.contains("-SELECT") && !key.contains("RESULT_OF") && !key.contains("UPDATE-SET") && !key.contains("MERGE-UPDATE")) || !this.isAcualTargetTbl) {
                if (onlySourceTarget.get(pointer) !== null) {
                    pointer = pointer + "~" + i;
                }
                onlySourceTarget.put(pointer, key);
            }
        }
    }
    catch (e) {
        throw e+" getTarget() "+"\n";
    }
    return onlySourceTarget;
}

//function updateSpecList()
function updateSpecList(specrowlist) {
    clearVariables();
    var updatedSpecRowList = null;
    var timestamp1 = null;
    var timestamp2 = null;
    try {
        timestamp2 = new Timestamp(System.currentTimeMillis());
        var tgtTableName = "";
        var srcSystemName = "";
        var srcEnvironmentName = "";
        var tgtSystemName = "";
        var tgtEnvironmentName = "";
        var onlySourceTarget = getTarget(specrowlist);

        timestamp1 = new Timestamp(System.currentTimeMillis());
        updatedSpecRowList = new ArrayList();
        var avoidDuplicates = new ArrayList();
        var avoidDuplicatesForNoSourceBrs = new ArrayList();
        if (deletemapflag) {
            getSpecsForDelete(specrowlist);
        }
        var sourceTableName = "";
        var sourceColumnName = "";
        var tgtColumnName = "";
        //get Set  Object that contains Entries In Map
        var entrySet=onlySourceTarget.entrySet();
        //get Iterator
        var iterator=entrySet.iterator();
        while(iterator.hasNext()){
            var entry=iterator.next();

            var key  = entry.getKey();
            var actualKey=entry.getKey();
            if (actualKey.contains("~~")) {
                //get Iterator Object
                var mapSpeciterator=specrowlist.iterator();
                while(mapSpeciterator.hasNext()){
                    var specRow=mapSpeciterator.next();

                    if (specRow === null) {
                        continue;
                    }
                    var arrActualKey = actualKey.split("~~");
                    var value = (entry.getValue() === null) ? "" : entry.getValue();
                    if (value.split("_AMM_").length == 1) {
                        tgtTableName = value.split("_AMM_")[0];
                    }
                    else if (value.split("_AMM_").length >= 1) {
                        tgtTableName = value.split("_AMM_")[0];
                        tgtColumnName = value.split("_AMM_")[1];
                    }
                    targetTableName = tgtTableName;
                    if (tgtColumnName.contains("~~")) {
                        tgtColumnName = tgtColumnName.substring(0, tgtColumnName.indexOf("~~"));
                    }
                    var tgtTbl = (specRow.getTargetTableName() === null) ? "" : specRow.getTargetTableName();
                    var tgtCol = (specRow.getTargetColumnName() === null) ? "" : specRow.getTargetColumnName();
                    if (!tgtTbl.equalsIgnoreCase(tgtTableName) || !tgtCol.equalsIgnoreCase(tgtColumnName)) {
                        continue;
                    }
                    for (var i = 0; i < arrActualKey.length; ++i) {
                        actualKey = arrActualKey[i];
                        var specRow2 = new MappingSpecificationRow();
                        if (actualKey.split("_AMM_").length == 1) {
                            sourceTableName = actualKey.split("_AMM_")[0];
                        }
                        else if (actualKey.split("_AMM_").length >= 1) {
                            sourceTableName = actualKey.split("_AMM_")[0];
                            sourceColumnName = actualKey.split("_AMM_")[1];
                            if (sourceColumnName.contains("~")) {
                                sourceColumnName = sourceColumnName.split("~")[0];
                            }
                        }
                        if ((sourceTableName.contains("RESULT_OF") || sourceTableName.contains("~") || sourceTableName.contains("_SELECT") || sourceTableName.contains("-SELECT") || sourceTableName.contains("UPDATE-SET") || sourceTableName.contains("MERGE-UPDATE")) && this.isActualSrcTbl) {
                            sourceTableName = "";
                            sourceColumnName = "";
                        }
                        if ((!tgtTableName.contains("RESULT_OF") && !tgtTableName.contains("_SELECT") && !tgtTableName.contains("-SELECT") && !tgtTableName.contains("UPDATE-SET") && !tgtTableName.contains("MERGE-UPDATE")) || !this.isAcualTargetTbl) {
                            srcSystemName = specRow.getSourceSystemName();
                            srcEnvironmentName = specRow.getSourceSystemEnvironmentName();
                            tgtSystemName = specRow.getTargetSystemName();
                            tgtEnvironmentName = specRow.getTargetSystemEnvironmentName();
                        }
                        if (!avoidDuplicates.contains(sourceTableName + "_AMM_" + sourceColumnName + "_AMM_" + tgtTableName + "_AMM_" + tgtColumnName)) {
                            avoidDuplicates.add(sourceTableName + "_AMM_" + sourceColumnName + "_AMM_" + tgtTableName + "_AMM_" + tgtColumnName);
                            specRow2.setSourceTableName(sourceTableName);
                            specRow2.setSourceColumnName(sourceColumnName);
                            specRow2.setTargetTableName(tgtTableName);
                            specRow2.setTargetColumnName(tgtColumnName);
                            specRow2.setSourceSystemName(specRow.getSourceSystemName());
                            specRow2.setSourceSystemEnvironmentName(specRow.getSourceSystemEnvironmentName());
                            specRow2.setTargetSystemName(specRow.getTargetSystemName());
                            specRow2.setTargetSystemEnvironmentName(specRow.getTargetSystemEnvironmentName());
                            if (finalbusinessRuleMap.get(value) !== null) {
                                //                                 specRow2.setBusinessRule(finalbusinessRuleMap.get(value).toString());
                                avoidDuplicatesForNoSourceBrs.add(tgtTableName + "_AMM_" + tgtColumnName + "_AMM_" + this.finalbusinessRuleMap.get(value));
                            }
                            else if (finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName) !== null) {
                                //                                 specRow2.setBusinessRule(finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName).toString());
                                avoidDuplicatesForNoSourceBrs.add(this.finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName));
                            }
                            if (!tgtTableName.trim().equals("") && !tgtColumnName.trim().equals("")) {
                                updatedSpecRowList.add(specRow2);
                            }
                        }
                    }
                }//while
            }
            else {
                if (key.split("_AMM_").length == 1) {
                    sourceTableName = ((key.split("_AMM_")[0] === null) ? "" : key.split("_AMM_")[0]);
                }
                else if (key.split("_AMM_").length >= 1) {
                    sourceTableName = ((key.split("_AMM_")[0] === null) ? "" : key.split("_AMM_")[0]);
                    sourceColumnName = key.split("_AMM_")[1];
                    if (sourceColumnName.contains("~")) {
                        sourceColumnName = ((sourceColumnName.split("~")[0] === null) ? "" : sourceColumnName.split("~")[0]);
                    }
                }
                var value2 = entry.getValue();
                if (value2.split("_AMM_").length == 1) {
                    tgtTableName = value2.split("_AMM_")[0];
                }
                else if (value2.split("_AMM_").length >= 1) {
                    tgtTableName = value2.split("_AMM_")[0];
                    tgtColumnName = value2.split("_AMM_")[1];
                }
                targetTableName = tgtTableName;
                //get Iterator Object
                var iteratorspecRow3=specrowlist.iterator();
                while(iteratorspecRow3.hasNext()){
                    var specRow3=iteratorspecRow3.next();
                    if (specRow3 === null) {
                        continue;
                    }
                    var tgtTbl2 = (specRow3.getTargetTableName() === null) ? "" : specRow3.getTargetTableName();
                    var tgtCol2= (specRow3.getTargetColumnName() === null) ? "" : specRow3.getTargetColumnName();
                    if (!tgtTbl2.equalsIgnoreCase(tgtTableName) || !tgtCol2.equalsIgnoreCase(tgtColumnName)) {
                        continue;
                    }
                    if ((sourceTableName.contains("RESULT_OF") || sourceTableName.contains("~") || sourceTableName.contains("_SELECT") || sourceTableName.contains("-SELECT") || sourceTableName.contains("UPDATE-SET") || sourceTableName.contains("MERGE-UPDATE")) && isActualSrcTbl) {
                        sourceTableName = "";
                        sourceColumnName = "";
                    }
                    if ((!tgtTableName.contains("RESULT_OF") && !tgtTableName.contains("_SELECT") && !tgtTableName.contains("-SELECT") && !tgtTableName.contains("UPDATE-SET") && !tgtTableName.contains("MERGE-UPDATE")) || !isAcualTargetTbl) {
                        srcSystemName = specRow3.getSourceSystemName();
                        srcEnvironmentName = specRow3.getSourceSystemEnvironmentName();
                        tgtSystemName = specRow3.getTargetSystemName();
                        tgtEnvironmentName = specRow3.getTargetSystemEnvironmentName();
                    }
                    if (avoidDuplicates.contains(sourceTableName + "_AMM_" + sourceColumnName + "_AMM_" + tgtTableName + "_AMM_" + tgtColumnName)) {
                        continue;
                    }
                    avoidDuplicates.add(sourceTableName + "_AMM_" + sourceColumnName + "_AMM_" + tgtTableName + "_AMM_" + tgtColumnName);
                    specRow3.setSourceTableName(sourceTableName);
                    specRow3.setSourceColumnName(sourceColumnName);
                    specRow3.setTargetTableName(tgtTableName);
                    specRow3.setTargetColumnName(tgtColumnName);
                    if (finalbusinessRuleMap.get(value2) !== null) {
                        if (!finalbusinessRuleMap.get(value2).trim().equals("")) {
                            avoidDuplicatesForNoSourceBrs.add(tgtTableName + "_AMM_" + tgtColumnName + "_AMM_" + finalbusinessRuleMap.get(value2));
                        }
                        //                         specRow3.setBusinessRule(finalbusinessRuleMap.get(value2).toString());
                    }
                    else if (finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName) !== null) {
                        if (!finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName).trim().equals("")) {
                            avoidDuplicatesForNoSourceBrs.add(tgtTableName + "_AMM_" + tgtColumnName + "_AMM_" + finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName));
                        }
                        //                         specRow3.setBusinessRule(finalbusinessRuleMap.get("RESULT_OF_SELECT-QUERY_AMM_" + tgtColumnName).toString());
                    }
                    updatedSpecRowList.add(specRow3);
                }//for
            }
        }
        //Get Set Object
        var businessRuleButNoSourceEntrySet=businessRuleButNoSource.entrySet();
        //get Iterator Object
        var businessRuleIterator=businessRuleButNoSourceEntrySet.iterator();
        while(businessRuleIterator.hasNext()){
            var entry2=businessRuleIterator.next();
            var businessRule = entry2.getKey().split("_AMM_")[0];
            tgtColumnName = entry2.getValue();
            tgtColumnName = tgtColumnName;
            if (!avoidDuplicatesForNoSourceBrs.contains(tgtTableName + "_AMM_" + tgtColumnName + "_AMM_" + businessRule)) {
                avoidDuplicatesForNoSourceBrs.add(tgtTableName + "_AMM_" + tgtColumnName + "_AMM_" + businessRule);
                var specRow4 = new MappingSpecificationRow();
                specRow4.setTargetTableName(tgtTableName);
                specRow4.setTargetColumnName(tgtColumnName);
                specRow4.setBusinessRule(businessRule);
                specRow4.setSourceSystemName(srcSystemName);
                specRow4.setSourceSystemEnvironmentName(srcEnvironmentName);
                specRow4.setTargetSystemName(tgtSystemName);
                specRow4.setTargetSystemEnvironmentName(tgtEnvironmentName);
                updatedSpecRowList.add(specRow4);
            }
        }
        updatedSpecRowList = getUpdatedListWithBr(specrowlist, updatedSpecRowList);
        updatedSpecRowList=  deleteSpecswhichIsNotHavingTgtCOl(updatedSpecRowList);
        return updatedSpecRowList;
    }
    catch (e) {
        throw e+" updateSpecList() "+"\n";
    }
    return updatedSpecRowList;
}

function getSpecsForDelete(specrowlist) {
    var updatedSpecs = new ArrayList();
    try {
        //get Set Object Contains Entries In Map
        //         var specrowlistEntrySet=specrowlist.iterator();
        //get Iterator
        var specrowlistIterator=specrowlist.iterator();
        while(specrowlistIterator.hasNext()){
            var specRow=specrowlistIterator.next();
            var tgtTblName = (specRow.getTargetTableName() === null) ? "" : specRow.getTargetTableName();
            if (tgtTblName.contains("RESULT_OF_SELECT-QUERY")) {
                specRow.setTargetTableName(deleteMapActaulTgtTableName);
                updatedSpecs.add(specRow);
            }
        }
    }
    catch (e) {
        throw e+" getSpecsForDelete() "+"\n";
    }
    return updatedSpecs;
}

function getspecificationdetails(updatedspeclist) {
    try{
        var checkset = new HashSet();
        var resultSpeclist = new ArrayList();
        for (var i = 0; i < updatedspeclist.size();
             i++) {
            var row = updatedspeclist.get(i);

            var targettablename = row.getTargetTableName();
            var sourceTableName = row.getSourceTableName();
            var sourceColumnName = row.getSourceColumnName();
            var targetColumnName = row.getTargetColumnName();
            var businessRule = row.getBusinessRule();
            if ("".equals(businessRule) || businessRule === null) {
                businessRule = "";
            }
            if (!checkset.contains(targettablename + "," + sourceTableName + "," + sourceColumnName + "," + targetColumnName + "," + businessRule)) {
                checkset.add(targettablename + "," + sourceTableName + "," + sourceColumnName + "," + targetColumnName + "," + businessRule);
                resultSpeclist.add(row);
            }

        }
        return resultSpeclist;
    }
    catch(e){
        throw e+" getspecificationdetails() "+"\n";
    }
}



//syncup by bhanu prakash earla

function metadataSync(envMap,mapping,smutill,projectid,subjectid,folderName,columnInfo,srcSys,srcEnv,tgtSys,tgtEnv) {
    var jsonvalue = "";
    var flag = true;
    try {
        if (envMap.size() > 0) {
            var mapSPecsLists = mapping.getMappingSpecifications();
            var mapName = mapping.getMappingName();
            var storproc = "";
            if (mapName.contains("[.]")) {
                storproc = mapName.substring(0, mapName.lastIndexOf("."));
            }
            storproc = mapName;
            var storprocName = storproc.replaceAll("[0-9]", "");
            var mapspecIterator = mapSPecsLists.iterator();
            while(mapspecIterator.hasNext()){
                var mapSPecs=mapspecIterator.next();
                //  for (MappingSpecificationRow mapSPecs : mapSPecsLists) {
                var Sourcetablename = mapSPecs.getSourceTableName();
                var sourceColumnName = mapSPecs.getSourceColumnName();
                var targetColumnName = mapSPecs.getTargetColumnName();
                // String br = mapSPecs.getBusinessRule();
                //                mapSPecs.getSourceColumnName()
                sourceNamesSet(Sourcetablename, envMap, mapSPecs, mapName, storprocName, folderName, srcSys, srcEnv);
                var Targettablename = mapSPecs.getTargetTableName();
                var trgtname = Targettablename.split("\n");
                for(var i=0;i<trgtname.length;i++){
                    //for (String tgtName : trgtname) {
                    targetNameSet(trgtname[i], envMap, mapSPecs, mapName, storprocName, folderName, tgtSys, tgtEnv);
                }
                //syncup column
                if (columnInfo.size() > 0) {
                    syncupSourceColumn(envMap, mapSPecs, Sourcetablename, sourceColumnName, columnInfo);
                    syncupTargetColumn(envMap, mapSPecs, Targettablename, targetColumnName, columnInfo);
                }

            }
            changeresultofTarget(mapSPecsLists, mapName);
            changeresultofSource(mapSPecsLists, mapName);

            var query = mapping.getSourceExtractQuery();

            var mapingobj = createMapFromMappingSpecifiactionRow(mapSPecsLists, mapName, query, projectid, subjectid);
            return mapingobj;
        }
    }
    catch (ex) {
        // Logger.getLogger(Syncmetadata_2.class.getName()).log(Level.SEVERE, null, ex);
        //flag = false;
        return e;

    }
    return null;
}


function syncupSourceColumn(envMap,mapSPecs,table,column,columnInfo) {
    try {
        if (column !== null && column !== "") {
            if (table.split("\n").length > 1) {
                var tableArr = table.split("\n");
                for(var i=0;i<tableArr.length;i++){
                    var sourceTableName=tableArr[i];

                    if(sourceTableName.contains(".")){
                        sourceTableName=sourceTableName.split(".")[sourceTableName.split(".").length-1];
                    }

                    if (envMap.get(sourceTableName) !== null) {
                        //get it from columnsmap
                        if (columnInfo.get(sourceTableName) !== null) {
                            var columnsMap = columnInfo.get(sourceTableName);
                            //get column
                            if (column.split("\n").length > 1) {

                                var columnArr = column.split("\n");
                                //for (String colname : columnArr) {
                                for(var j=0;j<columnArr.length;j++){
                                    if (columnsMap.get(columnArr[j]) !== null) {
                                        var columnProps = columnsMap.get(columnArr[j]);
                                        mapSPecs.setSourceColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                        mapSPecs.setSourceColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                        mapSPecs.setSourceColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                        if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceColumnDatatype(columnProps.split("##@##")[4]);
                                        }
                                        if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceColumnComments(columnProps.split("##@##")[5]);
                                        }
                                        if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceColumnDefinition(columnProps.split("##@##")[6]);
                                        }
                                        if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceColumnClass(columnProps.split("##@##")[7]);
                                        }
                                        if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceLogicalColumnName(columnProps.split("##@##")[8]);
                                        }
                                        if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceXPath(columnProps.split("##@##")[9]);
                                        }
                                        if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setSourceSDIDescription(columnProps.split("##@##")[10]);
                                        }
                                        mapSPecs.setSourceSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));

                                        mapSPecs.setSourceBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                        mapSPecs.setSourcePrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                        mapSPecs.setSourceColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                        mapSPecs.setSourceNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                                        mapSPecs.setSourceColumnIdentityFlag(Boolean.valueOf(columnProps.split("##@##")[17]));

                                    }
                                }

                            }
                            else {
                                if (columnsMap.get(column) !== null) {
                                    var columnProps = columnsMap.get(column);
                                    mapSPecs.setSourceColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                    mapSPecs.setSourceColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                    mapSPecs.setSourceColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                    if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceColumnDatatype(columnProps.split("##@##")[4]);
                                    }
                                    if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceColumnComments(columnProps.split("##@##")[5]);
                                    }
                                    if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceColumnDefinition(columnProps.split("##@##")[6]);
                                    }
                                    if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceColumnClass(columnProps.split("##@##")[7]);
                                    }
                                    if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceLogicalColumnName(columnProps.split("##@##")[8]);
                                    }
                                    if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceXPath(columnProps.split("##@##")[9]);
                                    }
                                    if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setSourceSDIDescription(columnProps.split("##@##")[10]);
                                    }
                                    mapSPecs.setSourceSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                                    mapSPecs.setSourceBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                    mapSPecs.setSourcePrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                    mapSPecs.setSourceColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                    mapSPecs.setSourceNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                                    mapSPecs.setSourceColumnIdentityFlag(Boolean.valueOf(columnProps.split("##@##")[17]));

                                }
                            }

                        }
                    }
                }
            }
            else {

                if(table.contains(".")){
                    table=table.split(".")[table.split(".").length-1];
                }
                if (envMap.get(table) !== null) {
                    //get it from columnsmap
                    var columnsMap = columnInfo.get(table);
                    //get column
                    if (column.split("\n").length > 1) {
                        var columnArr = column.split("\n");
                        // for (String colname : columnArr) {
                        for(var j=0;j<columnArr.length;j++){
                            if (columnsMap.get(columnArr[j]) !== null) {
                                var columnProps = columnsMap.get(columnArr[j]);
                                mapSPecs.setSourceColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                mapSPecs.setSourceColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                mapSPecs.setSourceColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceColumnDatatype(columnProps.split("##@##")[4]);
                                }
                                if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceColumnComments(columnProps.split("##@##")[5]);
                                }
                                if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceColumnDefinition(columnProps.split("##@##")[6]);
                                }
                                if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceColumnClass(columnProps.split("##@##")[7]);
                                }
                                if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceLogicalColumnName(columnProps.split("##@##")[8]);
                                }
                                if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceXPath(columnProps.split("##@##")[9]);
                                }
                                if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setSourceSDIDescription(columnProps.split("##@##")[10]);
                                }
                                mapSPecs.setSourceSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                                mapSPecs.setSourceBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                mapSPecs.setSourcePrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                mapSPecs.setSourceColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                mapSPecs.setSourceNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                                mapSPecs.setSourceColumnIdentityFlag(Boolean.valueOf(columnProps.split("##@##")[17]));

                            }
                        }

                    }
                    else {
                        if (columnsMap.get(column) !== null) {
                            var columnProps = columnsMap.get(column);
                            mapSPecs.setSourceColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                            mapSPecs.setSourceColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                            mapSPecs.setSourceColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                            if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceColumnDatatype(columnProps.split("##@##")[4]);
                            }
                            if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceColumnComments(columnProps.split("##@##")[5]);
                            }
                            if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceColumnDefinition(columnProps.split("##@##")[6]);
                            }
                            if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceColumnClass(columnProps.split("##@##")[7]);
                            }
                            if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceLogicalColumnName(columnProps.split("##@##")[8]);
                            }
                            if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceXPath(columnProps.split("##@##")[9]);
                            }
                            if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                mapSPecs.setSourceSDIDescription(columnProps.split("##@##")[10]);
                            }
                            mapSPecs.setSourceSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                            mapSPecs.setSourceBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                            mapSPecs.setSourcePrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                            mapSPecs.setSourceColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                            mapSPecs.setSourceNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                            mapSPecs.setSourceColumnIdentityFlag(Boolean.valueOf(columnProps.split("##@##")[17]));

                        }
                    }
                }
            }
        }
    }
    catch (e) {
        return e;
    }
}

function syncupTargetColumn(envMap,mapSPecs,table,column,columnInfo) {
    try {
        if (column !== null && column !== "") {
            if (table.split("\n").length > 1) {
                var tableArr = table.split("\n");
                for(var i=0;i<tableArr.length;i++){

                    var targetTableName=tableArr[i];

                    if(targetTableName.contains(".")){
                        targetTableName=targetTableName.split(".")[targetTableName.split(".").length-1];
                    }



                    if (envMap.get(targetTableName) !== null) {
                        //get it from columnsmap
                        if (columnInfo.get(targetTableName) !== null) {
                            var columnsMap = columnInfo.get(targetTableName);
                            //get column
                            if (column.split("\n").length > 1) {
                                var columnArr = column.split("\n");
                                //for (String colname : columnArr) {
                                for(var j=0;j<columnArr.length;j++){
                                    if (columnsMap.get(columnArr[j]) !== null) {
                                        var columnProps = columnsMap.get(columnArr[j]);
                                        mapSPecs.setTargetColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                        mapSPecs.setTargetColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                        mapSPecs.setTargetColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                        if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetColumnDatatype(columnProps.split("##@##")[4]);
                                        }
                                        if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetColumnComments(columnProps.split("##@##")[5]);
                                        }
                                        if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetColumnDefinition(columnProps.split("##@##")[6]);
                                        }
                                        if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetColumnClass(columnProps.split("##@##")[7]);
                                        }
                                        if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetLogicalColumnName(columnProps.split("##@##")[8]);
                                        }
                                        if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetXPath(columnProps.split("##@##")[9]);
                                        }
                                        if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                            mapSPecs.setTargetSDIDescription(columnProps.split("##@##")[10]);
                                        }
                                        mapSPecs.setTargetSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                                        mapSPecs.setTargetBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                        mapSPecs.setTargetPrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                        mapSPecs.setTargetColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                        mapSPecs.setTargetNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                                    }
                                }

                            }
                            else {
                                if (columnsMap.get(column) !== null) {
                                    var columnProps = columnsMap.get(column);
                                    mapSPecs.setTargetColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                    mapSPecs.setTargetColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                    mapSPecs.setTargetColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                    if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetColumnDatatype(columnProps.split("##@##")[4]);
                                    }
                                    if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetColumnComments(columnProps.split("##@##")[5]);
                                    }
                                    if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetColumnDefinition(columnProps.split("##@##")[6]);
                                    }
                                    if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetColumnClass(columnProps.split("##@##")[7]);
                                    }
                                    if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetLogicalColumnName(columnProps.split("##@##")[8]);
                                    }
                                    if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetXPath(columnProps.split("##@##")[9]);
                                    }
                                    if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                        mapSPecs.setTargetSDIDescription(columnProps.split("##@##")[10]);
                                    }
                                    mapSPecs.setTargetSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                                    mapSPecs.setTargetBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                    mapSPecs.setTargetPrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                    mapSPecs.setTargetColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                    mapSPecs.setTargetNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                                }
                            }

                        }
                    }
                }
            }
            else {
                if(table.contains(".")){
                    table=table.split(".")[table.split(".").length-1];
                }
                if (envMap.get(table) !== null) {
                    //get it from columnsmap
                    var columnsMap = columnInfo.get(table);
                    //get column
                    if (column.split("\n").length > 1) {
                        var columnArr = column.split("\n");
                        //  for (String colname : columnArr) {
                        for(var k=0;k<columnArr.length;k++){
                            if (columnsMap.get(columnArr[k]) !== null) {
                                var columnProps = columnsMap.get(columnArr[k]);
                                mapSPecs.setTargetColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                                mapSPecs.setTargetColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                                mapSPecs.setTargetColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                                if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetColumnDatatype(columnProps.split("##@##")[4]);
                                }
                                if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetColumnComments(columnProps.split("##@##")[5]);
                                }
                                if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetColumnDefinition(columnProps.split("##@##")[6]);
                                }
                                if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetColumnClass(columnProps.split("##@##")[7]);
                                }
                                if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetLogicalColumnName(columnProps.split("##@##")[8]);
                                }
                                if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetXPath(columnProps.split("##@##")[9]);
                                }
                                if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                    mapSPecs.setTargetSDIDescription(columnProps.split("##@##")[10]);
                                }
                                mapSPecs.setTargetSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                                mapSPecs.setTargetBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                                mapSPecs.setTargetPrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                                mapSPecs.setTargetColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                                mapSPecs.setTargetNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                            }
                        }

                    }
                    else {
                        if (columnsMap.get(column) !== null) {
                            var columnProps = columnsMap.get(column);
                            mapSPecs.setTargetColumnLength(Integer.parseInt(columnProps.split("##@##")[1]));
                            mapSPecs.setTargetColumnPrecision(Integer.parseInt(columnProps.split("##@##")[2]));
                            mapSPecs.setTargetColumnScale(Integer.parseInt(columnProps.split("##@##")[3]));
                            if (!columnProps.split("##@##")[4].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetColumnDatatype(columnProps.split("##@##")[4]);
                            }
                            if (!columnProps.split("##@##")[5].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetColumnComments(columnProps.split("##@##")[5]);
                            }
                            if (!columnProps.split("##@##")[6].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetColumnDefinition(columnProps.split("##@##")[6]);
                            }
                            if (!columnProps.split("##@##")[7].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetColumnClass(columnProps.split("##@##")[7]);
                            }
                            if (!columnProps.split("##@##")[8].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetLogicalColumnName(columnProps.split("##@##")[8]);
                            }
                            if (!columnProps.split("##@##")[9].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetXPath(columnProps.split("##@##")[9]);
                            }
                            if (!columnProps.split("##@##")[10].equalsIgnoreCase("erwin")) {
                                mapSPecs.setTargetSDIDescription(columnProps.split("##@##")[10]);
                            }
                            mapSPecs.setTargetSDIFlag(Boolean.valueOf(columnProps.split("##@##")[11]));
                            mapSPecs.setTargetBusinessKeyFlag(Boolean.valueOf(columnProps.split("##@##")[12]));
                            mapSPecs.setTargetPrimaryKeyFlag(Boolean.valueOf(columnProps.split("##@##")[14]));
                            mapSPecs.setTargetColumnNullableFlag(Boolean.valueOf(columnProps.split("##@##")[15]));
                            mapSPecs.setTargetNaturalKeyFlag(Boolean.valueOf(columnProps.split("##@##")[16]));
                        }
                    }
                }
            }
        }
    }
    catch ( e) {
        return e;
    }
}


function sourceNamesSet(Sourcetablename,  envMap,  mapSPecs,  mapName,  storprocName,  folderName,  srcSys,  srcEnv) {
    if (Sourcetablename.split("\n").length > 1) {
        var sourcetablecolumn = Sourcetablename.split("\n");
        // envMap.toString();
        var sourcesystem = getSourceSystem(sourcetablecolumn, mapName, envMap, mapSPecs, storprocName, folderName, srcSys);
        var sourceenv = getSourceEnv(sourcetablecolumn, mapName, envMap, storprocName, folderName, srcEnv);
        var sourceSystem = StringUtils.join(sourcesystem, "\n");
        var sourceEnv = StringUtils.join(sourceenv, "\n");
        mapSPecs.setSourceSystemEnvironmentName(sourceEnv);
        mapSPecs.setSourceSystemName(sourceSystem);
    }
    else {
        Sourcetablename = Sourcetablename.replace("[", "").replace("]", "");

        if(Sourcetablename.contains(".")){
            Sourcetablename=Sourcetablename.split(".")[Sourcetablename.split(".").length-1];
        }
        //         System.out.println(Sourcetablename.contains(".")+","+Sourcetablename+","+envMap.containsKey(Sourcetablename));


        if (envMap.containsKey(Sourcetablename)) {
            var sourceenvSys = envMap.get(Sourcetablename);
            var SystemName = sourceenvSys.split("#")[1];
            var environmentName = sourceenvSys.split("#")[0];
            mapSPecs.setSourceSystemName(SystemName);
            mapSPecs.setSourceSystemEnvironmentName(environmentName);
        }
        else if (!Sourcetablename.toUpperCase().contains("RESULT_OF_") && !Sourcetablename.toUpperCase().contains("INSERT-SELECT") && !Sourcetablename.toUpperCase().contains("UPDATE-SELECT")) {
            mapSPecs.setSourceSystemEnvironmentName(srcEnv);
            mapSPecs.setSourceSystemName(srcSys);
        }
        else {
            mapSPecs.setSourceSystemEnvironmentName(folderName + "_" + storprocName);
            mapSPecs.setSourceSystemName(folderName + "_" + storprocName);
        }

    }
}


function targetNameSet( Targettablename, envMap,  mapSPecs,  mapName,  storprocName,  folderName,  tgtSys,  tgtEnv) {

    if(Targettablename.contains(".")){
        Targettablename=Targettablename.split(".")[Targettablename.split(".").length-1];
    }


    if (envMap.containsKey(Targettablename)) {
        var targetenvSys = envMap.get(Targettablename);
        var SystemName = targetenvSys.split("#")[1];
        mapSPecs.setTargetSystemName(SystemName);
        var environmentName = targetenvSys.split("#")[0];
        mapSPecs.setTargetSystemEnvironmentName(environmentName);
    }
    else if (!Targettablename.toUpperCase().contains("RESULT_OF_") && !Targettablename.toUpperCase().contains("INSERT-SELECT") && !Targettablename.toUpperCase().contains("UPDATE-SELECT")) {
        mapSPecs.setTargetSystemName(tgtSys);
        mapSPecs.setTargetSystemEnvironmentName(tgtEnv);
        //         System.out.println(Targettablename);
    }
    else {
        mapSPecs.setTargetSystemName(folderName + "_" + storprocName);
        mapSPecs.setTargetSystemEnvironmentName(folderName + "_" + storprocName);
    }
    if (Targettablename.toUpperCase().contains("RESULT_OF_") || Targettablename.toUpperCase().contains("INSERT-SELECT") || Targettablename.toUpperCase().contains("UPDATE-SELECT")) {
        mapSPecs.setTargetTableName(Targettablename + "_" + mapName);
    }

}


function createMapFromMappingSpecifiactionRow(specrowlist, mapfileName, query, projectid,  subjectid) {
    var mapping = new Mapping();
    mapping.setMappingName(mapfileName);
    mapping.setMappingSpecifications(specrowlist);
    mapping.setSourceExtractQuery(query);
    mapping.setProjectId(projectid);
    mapping.setSubjectId(subjectid);
    return mapping;
}


function getSourceSystem( sourcetablename, mapname,  envMap,  mapSPecs,  storprocName,  folderName,  srcSystem) {
    var sourcesystem = new LinkedList();
    try {

        for(var i=0;i<sourcetablename.length;i++){
            var srcTableName=sourcetablename[i];
            if(srcTableName.contains(".")){
                srcTableName=srcTableName.split(".")[srcTableName.split(".").length-1];
            }
            if (envMap.get(srcTableName) !== null) {
                var sourceenvSys = envMap.get(srcTableName);
                sourcesystem.add(sourceenvSys.split("#")[1]);
            }
            else if (!sourcetablename[i].toUpperCase().contains("RESULT_OF_") && !sourcetablename[i].toUpperCase().contains("INSERT-SELECT") && !sourcetablename[i].toUpperCase().contains("UPDATE-SELECT")) {
                sourcesystem.add(srcSystem);
            }
            else {
                sourcesystem.add(folderName + "_" + storprocName);
            }
        }
    }
    catch ( e) {
        return e;
    }
    return sourcesystem;
}


function getSourceEnv( sourcetablename,  mapname,envMap,  storprocName,  folderName,  srcEnv) {
    var sourceenv = new LinkedList();
    try {
        for(var i=0;i<sourcetablename.length;i++){

            var srcTableName=sourcetablename[i];
            if(srcTableName.contains(".")){
                srcTableName=srcTableName.split(".")[srcTableName.split(".").length-1];
            }

            if (envMap.get(srcTableName) !== null) {
                var sourceenvSys = envMap.get(srcTableName);
                sourceenv.add(sourceenvSys.split("#")[0]);
            }
            else if (!sourcetablename[i].toUpperCase().contains("RESULT_OF_") && !sourcetablename[i].toUpperCase().contains("INSERT-SELECT") && !sourcetablename[i].toUpperCase().contains("UPDATE-SELECT")) {
                sourceenv.add(srcEnv);
            }
            else {
                sourceenv.add(folderName + "_" + storprocName);
            }
        }
    }
    catch (e) {
        return e;
    }
    return sourceenv;
}


function changeresultofTarget( mapspeclist,  mapname) {
    var targettabset = new LinkedHashSet();
    var iter = mapspeclist.iterator();

    while (iter.hasNext()) {
        var row = iter.next();
        var targetTabName = row.getTargetTableName();
        if (!targetTabName.toUpperCase().contains(mapname.toUpperCase())) {
            var targetarr = targetTabName.split("\n");
            // for (String targettab : targetarr) {
            for(var i=0;i<targetarr.length;i++){
                if (targetarr[i].toUpperCase().contains("RESULT_OF")) {

                    targettabset.add(targetarr[i].toUpperCase() + "_" + mapname);
                }
            }//for
            if (!targettabset.isEmpty()) {
                var appendtargetTabName = StringUtils.join(targettabset, "\n");
                //System.out.println(appendtargetTabName);
                row.setTargetTableName(appendtargetTabName);
            }
            targettabset.clear();
        }
    }
}


function changeresultofSource(mapspeclist,  mapname) {
    var sourcetabset = new ArrayList();
    var iter = mapspeclist.iterator();

    while (iter.hasNext()) {
        var row = iter.next();
        var sourceTabName = row.getSourceTableName();

        var sourcearr = sourceTabName.split("\n");
        //  for (String sourcetab : sourcearr) {
        for(var i=0;i<sourcearr.length;i++){
            if (sourcearr[i].toUpperCase().contains("RESULT_OF_") || sourcearr[i].toUpperCase().contains("INSERT-SELECT") || sourcearr[i].toUpperCase().contains("UPDATE-SELECT")) {
                sourcetabset.add(sourcearr[i] + "_" + mapname);
            }
            else {
                sourcetabset.add(sourcearr[i]);
            }
        }//for
        if (!sourcetabset.isEmpty()) {
            var appendsource = StringUtils.join(sourcetabset, "\n");
            // System.out.println(appendsource);
            row.setSourceTableName(appendsource);
        }
        sourcetabset.clear();

    }

}

function getUpdatedListWithBr(specRowList,updatedList_) {
    try {
        var  updatedList_iterator = updatedList_.iterator();
        while (updatedList_iterator.hasNext()) {
            var row = updatedList_iterator.next();
            var srcTb = row.getSourceTableName();
            var srcCol = row.getSourceColumnName();
            var specRowList_iterator = specRowList.iterator();
            while (specRowList_iterator.hasNext()) {
                var row_ = specRowList_iterator.next();
                if (row_.getSourceTableName().equalsIgnoreCase(srcTb) && row_.getSourceColumnName().equalsIgnoreCase(srcCol) && row_.getBusinessRule() !== "" && row_.getBusinessRule() !== null && row_.getBusinessRule().trim().length() !== 0) {
                    row.setBusinessRule(row_.getBusinessRule());
                    break;
                }

            }
        }
    }
    catch (e) {
    }
    return updatedList_;
}

function deleteSpecswhichIsNotHavingTgtCOl(updatedList_){
    var updatedList=new ArrayList();
    try{
        var  updatedList_iterator = updatedList_.iterator();
        while(updatedList_iterator.hasNext()){
            var row=updatedList_iterator.next();
            var tgtTbl=row.getTargetTableName();
            var tgtCol=row.getTargetColumnName();
            if(tgtTbl.trim().length()===0 || tgtTbl===""||tgtTbl===null ||tgtCol.trim().length()===0 || tgtCol===""||tgtCol===null ){
            }
            else{
                updatedList.add(row);
            }
        }
        return updatedList;
    }
    catch(e){
        return e;

    }

}